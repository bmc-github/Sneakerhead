/**
 * @return {undefined}
 */
function ChangeOrientation() {
  setTimeout(function() {
  }, 200);
}
if ("undefined" == typeof jQuery) {
  throw new Error("Bootstrap's JavaScript requires jQuery");
}
+function($) {
  var e = $.fn.jquery.split(" ")[0].split(".");
  if (e[0] < 2 && e[1] < 9 || (1 == e[0] && (9 == e[1] && e[2] < 1) || e[0] > 2)) {
    throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 3");
  }
}(jQuery), +function($) {
  /**
   * @return {?}
   */
  function transitionEnd() {
    /** @type {Element} */
    var el = document.createElement("bootstrap");
    var transEndEventNames = {
      WebkitTransition : "webkitTransitionEnd",
      MozTransition : "transitionend",
      OTransition : "oTransitionEnd otransitionend",
      transition : "transitionend"
    };
    var name;
    for (name in transEndEventNames) {
      if (void 0 !== el.style[name]) {
        return{
          end : transEndEventNames[name]
        };
      }
    }
    return false;
  }
  /**
   * @param {number} duration
   * @return {?}
   */
  $.fn.emulateTransitionEnd = function(duration) {
    /** @type {boolean} */
    var i = false;
    var $el = this;
    $(this).one("bsTransitionEnd", function() {
      /** @type {boolean} */
      i = true;
    });
    /**
     * @return {undefined}
     */
    var callback = function() {
      if (!i) {
        $($el).trigger($.support.transition.end);
      }
    };
    return setTimeout(callback, duration), this;
  };
  $(function() {
    $.support.transition = transitionEnd();
    if ($.support.transition) {
      $.event.special.bsTransitionEnd = {
        bindType : $.support.transition.end,
        delegateType : $.support.transition.end,
        /**
         * @param {Event} event
         * @return {?}
         */
        handle : function(event) {
          return $(event.target).is(this) ? event.handleObj.handler.apply(this, arguments) : void 0;
        }
      };
    }
  });
}(jQuery), +function($) {
  /**
   * @param {?} type
   * @return {?}
   */
  function setValue(type) {
    return this.each(function() {
      var $this = $(this);
      var data = $this.data("bs.alert");
      if (!data) {
        $this.data("bs.alert", data = new Alert(this));
      }
      if ("string" == typeof type) {
        data[type].call($this);
      }
    });
  }
  /** @type {string} */
  var f3 = '[data-dismiss="alert"]';
  /**
   * @param {?} el
   * @return {undefined}
   */
  var Alert = function(el) {
    $(el).on("click", f3, this.close);
  };
  /** @type {string} */
  Alert.VERSION = "3.3.6";
  /** @type {number} */
  Alert.TRANSITION_DURATION = 150;
  /**
   * @param {Object} e
   * @return {undefined}
   */
  Alert.prototype.close = function(e) {
    /**
     * @return {undefined}
     */
    function removeElement() {
      $parent.detach().trigger("closed.bs.alert").remove();
    }
    var $this = $(this);
    var selector = $this.attr("data-target");
    if (!selector) {
      selector = $this.attr("href");
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, "");
    }
    var $parent = $(selector);
    if (e) {
      e.preventDefault();
    }
    if (!$parent.length) {
      $parent = $this.closest(".alert");
    }
    $parent.trigger(e = $.Event("close.bs.alert"));
    if (!e.isDefaultPrevented()) {
      $parent.removeClass("in");
      if ($.support.transition && $parent.hasClass("fade")) {
        $parent.one("bsTransitionEnd", removeElement).emulateTransitionEnd(Alert.TRANSITION_DURATION);
      } else {
        removeElement();
      }
    }
  };
  var old = $.fn.alert;
  /** @type {function (?): ?} */
  $.fn.alert = setValue;
  /** @type {function (?): undefined} */
  $.fn.alert.Constructor = Alert;
  /**
   * @return {?}
   */
  $.fn.alert.noConflict = function() {
    return $.fn.alert = old, this;
  };
  $(document).on("click.bs.alert.data-api", f3, Alert.prototype.close);
}(jQuery), +function($) {
  /**
   * @param {string} option
   * @return {?}
   */
  function init(option) {
    return this.each(function() {
      var $this = $(this);
      var data = $this.data("bs.button");
      var options = "object" == typeof option && option;
      if (!data) {
        $this.data("bs.button", data = new Button(this, options));
      }
      if ("toggle" == option) {
        data.toggle();
      } else {
        if (option) {
          data.setState(option);
        }
      }
    });
  }
  /**
   * @param {?} element
   * @param {?} options
   * @return {undefined}
   */
  var Button = function(element, options) {
    this.$element = $(element);
    this.options = $.extend({}, Button.DEFAULTS, options);
    /** @type {boolean} */
    this.isLoading = false;
  };
  /** @type {string} */
  Button.VERSION = "3.3.6";
  Button.DEFAULTS = {
    loadingText : "loading..."
  };
  /**
   * @param {string} state
   * @return {undefined}
   */
  Button.prototype.setState = function(state) {
    /** @type {string} */
    var d = "disabled";
    var $el = this.$element;
    /** @type {string} */
    var val = $el.is("input") ? "val" : "html";
    var data = $el.data();
    state += "Text";
    if (null == data.resetText) {
      $el.data("resetText", $el[val]());
    }
    setTimeout($.proxy(function() {
      $el[val](null == data[state] ? this.options[state] : data[state]);
      if ("loadingText" == state) {
        /** @type {boolean} */
        this.isLoading = true;
        $el.addClass(d).attr(d, d);
      } else {
        if (this.isLoading) {
          /** @type {boolean} */
          this.isLoading = false;
          $el.removeClass(d).removeAttr(d);
        }
      }
    }, this), 0);
  };
  /**
   * @return {undefined}
   */
  Button.prototype.toggle = function() {
    /** @type {boolean} */
    var t = true;
    var $shcell = this.$element.closest('[data-toggle="buttons"]');
    if ($shcell.length) {
      var $input = this.$element.find("input");
      if ("radio" == $input.prop("type")) {
        if ($input.prop("checked")) {
          /** @type {boolean} */
          t = false;
        }
        $shcell.find(".active").removeClass("active");
        this.$element.addClass("active");
      } else {
        if ("checkbox" == $input.prop("type")) {
          if ($input.prop("checked") !== this.$element.hasClass("active")) {
            /** @type {boolean} */
            t = false;
          }
          this.$element.toggleClass("active");
        }
      }
      $input.prop("checked", this.$element.hasClass("active"));
      if (t) {
        $input.trigger("change");
      }
    } else {
      this.$element.attr("aria-pressed", !this.$element.hasClass("active"));
      this.$element.toggleClass("active");
    }
  };
  var old = $.fn.button;
  /** @type {function (string): ?} */
  $.fn.button = init;
  /** @type {function (?, ?): undefined} */
  $.fn.button.Constructor = Button;
  /**
   * @return {?}
   */
  $.fn.button.noConflict = function() {
    return $.fn.button = old, this;
  };
  $(document).on("click.bs.button.data-api", '[data-toggle^="button"]', function(evt) {
    var self = $(evt.target);
    if (!self.hasClass("btn")) {
      self = self.closest(".btn");
    }
    init.call(self, "toggle");
    if (!$(evt.target).is('input[type="radio"]')) {
      if (!$(evt.target).is('input[type="checkbox"]')) {
        evt.preventDefault();
      }
    }
  }).on("focus.bs.button.data-api blur.bs.button.data-api", '[data-toggle^="button"]', function(e) {
    $(e.target).closest(".btn").toggleClass("focus", /^focus(in)?$/.test(e.type));
  });
}(jQuery), +function($) {
  /**
   * @param {number} option
   * @return {?}
   */
  function init(option) {
    return this.each(function() {
      var $this = $(this);
      var data = $this.data("bs.carousel");
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), "object" == typeof option && option);
      var action = "string" == typeof option ? option : options.slide;
      if (!data) {
        $this.data("bs.carousel", data = new Carousel(this, options));
      }
      if ("number" == typeof option) {
        data.to(option);
      } else {
        if (action) {
          data[action]();
        } else {
          if (options.interval) {
            data.pause().cycle();
          }
        }
      }
    });
  }
  /**
   * @param {?} element
   * @param {Object} options
   * @return {undefined}
   */
  var Carousel = function(element, options) {
    this.$element = $(element);
    this.$indicators = this.$element.find(".carousel-indicators");
    /** @type {Object} */
    this.options = options;
    /** @type {null} */
    this.paused = null;
    /** @type {null} */
    this.sliding = null;
    /** @type {null} */
    this.interval = null;
    /** @type {null} */
    this.$active = null;
    /** @type {null} */
    this.$items = null;
    if (this.options.keyboard) {
      this.$element.on("keydown.bs.carousel", $.proxy(this.keydown, this));
    }
    if ("hover" == this.options.pause) {
      if (!("ontouchstart" in document.documentElement)) {
        this.$element.on("mouseenter.bs.carousel", $.proxy(this.pause, this)).on("mouseleave.bs.carousel", $.proxy(this.cycle, this));
      }
    }
  };
  /** @type {string} */
  Carousel.VERSION = "3.3.6";
  /** @type {number} */
  Carousel.TRANSITION_DURATION = 600;
  Carousel.DEFAULTS = {
    interval : 5E3,
    pause : "hover",
    wrap : true,
    keyboard : true
  };
  /**
   * @param {Event} e
   * @return {undefined}
   */
  Carousel.prototype.keydown = function(e) {
    if (!/input|textarea/i.test(e.target.tagName)) {
      switch(e.which) {
        case 37:
          this.prev();
          break;
        case 39:
          this.next();
          break;
        default:
          return;
      }
      e.preventDefault();
    }
  };
  /**
   * @param {boolean} dataAndEvents
   * @return {?}
   */
  Carousel.prototype.cycle = function(dataAndEvents) {
    return dataAndEvents || (this.paused = false), this.interval && clearInterval(this.interval), this.options.interval && (!this.paused && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))), this;
  };
  /**
   * @param {?} item
   * @return {?}
   */
  Carousel.prototype.getItemIndex = function(item) {
    return this.$items = item.parent().children(".item"), this.$items.index(item || this.$active);
  };
  /**
   * @param {string} b
   * @param {?} relativeToItem
   * @return {?}
   */
  Carousel.prototype.getItemForDirection = function(b, relativeToItem) {
    var index = this.getItemIndex(relativeToItem);
    /** @type {boolean} */
    var o = "prev" == b && 0 === index || "next" == b && index == this.$items.length - 1;
    if (o && !this.options.wrap) {
      return relativeToItem;
    }
    /** @type {number} */
    var count = "prev" == b ? -1 : 1;
    /** @type {number} */
    var ix = (index + count) % this.$items.length;
    return this.$items.eq(ix);
  };
  /**
   * @param {number} pos
   * @return {?}
   */
  Carousel.prototype.to = function(pos) {
    var that = this;
    var activePos = this.getItemIndex(this.$active = this.$element.find(".item.active"));
    return pos > this.$items.length - 1 || 0 > pos ? void 0 : this.sliding ? this.$element.one("slid.bs.carousel", function() {
      that.to(pos);
    }) : activePos == pos ? this.pause().cycle() : this.slide(pos > activePos ? "next" : "prev", this.$items.eq(pos));
  };
  /**
   * @param {boolean} $vid
   * @return {?}
   */
  Carousel.prototype.pause = function($vid) {
    return $vid || (this.paused = true), this.$element.find(".next, .prev").length && ($.support.transition && (this.$element.trigger($.support.transition.end), this.cycle(true))), this.interval = clearInterval(this.interval), this;
  };
  /**
   * @return {?}
   */
  Carousel.prototype.next = function() {
    return this.sliding ? void 0 : this.slide("next");
  };
  /**
   * @return {?}
   */
  Carousel.prototype.prev = function() {
    return this.sliding ? void 0 : this.slide("prev");
  };
  /**
   * @param {string} b
   * @param {string} ui
   * @return {?}
   */
  Carousel.prototype.slide = function(b, ui) {
    var $active = this.$element.find(".item.active");
    var node = ui || this.getItemForDirection(b, $active);
    var isCycling = this.interval;
    /** @type {string} */
    var direction = "next" == b ? "left" : "right";
    var that = this;
    if (node.hasClass("active")) {
      return this.sliding = false;
    }
    var previous = node[0];
    var e = $.Event("slide.bs.carousel", {
      relatedTarget : previous,
      direction : direction
    });
    if (this.$element.trigger(e), !e.isDefaultPrevented()) {
      if (this.sliding = true, isCycling && this.pause(), this.$indicators.length) {
        this.$indicators.find(".active").removeClass("active");
        var $listing = $(this.$indicators.children()[this.getItemIndex(node)]);
        if ($listing) {
          $listing.addClass("active");
        }
      }
      var startEvent = $.Event("slid.bs.carousel", {
        relatedTarget : previous,
        direction : direction
      });
      return $.support.transition && this.$element.hasClass("slide") ? (node.addClass(b), node[0].offsetWidth, $active.addClass(direction), node.addClass(direction), $active.one("bsTransitionEnd", function() {
        node.removeClass([b, direction].join(" ")).addClass("active");
        $active.removeClass(["active", direction].join(" "));
        /** @type {boolean} */
        that.sliding = false;
        setTimeout(function() {
          that.$element.trigger(startEvent);
        }, 0);
      }).emulateTransitionEnd(Carousel.TRANSITION_DURATION)) : ($active.removeClass("active"), node.addClass("active"), this.sliding = false, this.$element.trigger(startEvent)), isCycling && this.cycle(), this;
    }
  };
  var old = $.fn.carousel;
  /** @type {function (number): ?} */
  $.fn.carousel = init;
  /** @type {function (?, Object): undefined} */
  $.fn.carousel.Constructor = Carousel;
  /**
   * @return {?}
   */
  $.fn.carousel.noConflict = function() {
    return $.fn.carousel = old, this;
  };
  /**
   * @param {?} event
   * @return {undefined}
   */
  var start = function(event) {
    var href;
    var $this = $(this);
    var panel = $($this.attr("data-target") || (href = $this.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, ""));
    if (panel.hasClass("carousel")) {
      var next = $.extend({}, panel.data(), $this.data());
      var slideIndex = $this.attr("data-slide-to");
      if (slideIndex) {
        /** @type {boolean} */
        next.interval = false;
      }
      init.call(panel, next);
      if (slideIndex) {
        panel.data("bs.carousel").to(slideIndex);
      }
      event.preventDefault();
    }
  };
  $(document).on("click.bs.carousel.data-api", "[data-slide]", start).on("click.bs.carousel.data-api", "[data-slide-to]", start);
  $(window).on("load", function() {
    $('[data-ride="carousel"]').each(function() {
      var self = $(this);
      init.call(self, self.data());
    });
  });
}(jQuery), +function($) {
  /**
   * @param {HTMLElement} $this
   * @return {?}
   */
  function getParent($this) {
    var href;
    var statsTemplate = $this.attr("data-target") || (href = $this.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, "");
    return $(statsTemplate);
  }
  /**
   * @param {boolean} options
   * @return {?}
   */
  function build(options) {
    return this.each(function() {
      var $this = $(this);
      var data = $this.data("bs.collapse");
      var settings = $.extend({}, Collapse.DEFAULTS, $this.data(), "object" == typeof options && options);
      if (!data) {
        if (settings.toggle) {
          if (/show|hide/.test(options)) {
            /** @type {boolean} */
            settings.toggle = false;
          }
        }
      }
      if (!data) {
        $this.data("bs.collapse", data = new Collapse(this, settings));
      }
      if ("string" == typeof options) {
        data[options]();
      }
    });
  }
  /**
   * @param {Element} element
   * @param {?} options
   * @return {undefined}
   */
  var Collapse = function(element, options) {
    this.$element = $(element);
    this.options = $.extend({}, Collapse.DEFAULTS, options);
    this.$trigger = $('[data-toggle="collapse"][href="#' + element.id + '"],[data-toggle="collapse"][data-target="#' + element.id + '"]');
    /** @type {null} */
    this.transitioning = null;
    if (this.options.parent) {
      this.$parent = this.getParent();
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger);
    }
    if (this.options.toggle) {
      this.toggle();
    }
  };
  /** @type {string} */
  Collapse.VERSION = "3.3.6";
  /** @type {number} */
  Collapse.TRANSITION_DURATION = 350;
  Collapse.DEFAULTS = {
    toggle : true
  };
  /**
   * @return {?}
   */
  Collapse.prototype.dimension = function() {
    var hasWidth = this.$element.hasClass("width");
    return hasWidth ? "width" : "height";
  };
  /**
   * @return {?}
   */
  Collapse.prototype.show = function() {
    if (!this.transitioning && !this.$element.hasClass("in")) {
      var hasData;
      var self = this.$parent && this.$parent.children(".panel").children(".in, .collapsing");
      if (!(self && (self.length && (hasData = self.data("bs.collapse"), hasData && hasData.transitioning)))) {
        var e = $.Event("show.bs.collapse");
        if (this.$element.trigger(e), !e.isDefaultPrevented()) {
          if (self) {
            if (self.length) {
              build.call(self, "hide");
              if (!hasData) {
                self.data("bs.collapse", null);
              }
            }
          }
          var dimension = this.dimension();
          this.$element.removeClass("collapse").addClass("collapsing")[dimension](0).attr("aria-expanded", true);
          this.$trigger.removeClass("collapsed").attr("aria-expanded", true);
          /** @type {number} */
          this.transitioning = 1;
          /**
           * @return {undefined}
           */
          var complete = function() {
            this.$element.removeClass("collapsing").addClass("collapse in")[dimension]("");
            /** @type {number} */
            this.transitioning = 0;
            this.$element.trigger("shown.bs.collapse");
          };
          if (!$.support.transition) {
            return complete.call(this);
          }
          var scrollSize = $.camelCase(["scroll", dimension].join("-"));
          this.$element.one("bsTransitionEnd", $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize]);
        }
      }
    }
  };
  /**
   * @return {?}
   */
  Collapse.prototype.hide = function() {
    if (!this.transitioning && this.$element.hasClass("in")) {
      var e = $.Event("hide.bs.collapse");
      if (this.$element.trigger(e), !e.isDefaultPrevented()) {
        var dimension = this.dimension();
        this.$element[dimension](this.$element[dimension]())[0].offsetHeight;
        this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded", false);
        this.$trigger.addClass("collapsed").attr("aria-expanded", false);
        /** @type {number} */
        this.transitioning = 1;
        /**
         * @return {undefined}
         */
        var complete = function() {
          /** @type {number} */
          this.transitioning = 0;
          this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse");
        };
        return $.support.transition ? void this.$element[dimension](0).one("bsTransitionEnd", $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION) : complete.call(this);
      }
    }
  };
  /**
   * @return {undefined}
   */
  Collapse.prototype.toggle = function() {
    this[this.$element.hasClass("in") ? "hide" : "show"]();
  };
  /**
   * @return {?}
   */
  Collapse.prototype.getParent = function() {
    return $(this.options.parent).find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]').each($.proxy(function(dataAndEvents, thisObject) {
      var $this = $(thisObject);
      this.addAriaAndCollapsedClass(getParent($this), $this);
    }, this)).end();
  };
  /**
   * @param {HTMLElement} element
   * @param {?} el
   * @return {undefined}
   */
  Collapse.prototype.addAriaAndCollapsedClass = function(element, el) {
    var show = element.hasClass("in");
    element.attr("aria-expanded", show);
    el.toggleClass("collapsed", !show).attr("aria-expanded", show);
  };
  var old = $.fn.collapse;
  /** @type {function (boolean): ?} */
  $.fn.collapse = build;
  /** @type {function (Element, ?): undefined} */
  $.fn.collapse.Constructor = Collapse;
  /**
   * @return {?}
   */
  $.fn.collapse.noConflict = function() {
    return $.fn.collapse = old, this;
  };
  $(document).on("click.bs.collapse.data-api", '[data-toggle="collapse"]', function(types) {
    var $this = $(this);
    if (!$this.attr("data-target")) {
      types.preventDefault();
    }
    var value = getParent($this);
    var data = value.data("bs.collapse");
    var option = data ? "toggle" : $this.data();
    build.call(value, option);
  });
}(jQuery), +function($) {
  /**
   * @param {Element} $this
   * @return {?}
   */
  function getParent($this) {
    var selector = $this.attr("data-target");
    if (!selector) {
      selector = $this.attr("href");
      selector = selector && (/#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, ""));
    }
    var $parent = selector && $(selector);
    return $parent && $parent.length ? $parent : $this.parent();
  }
  /**
   * @param {Object} e
   * @return {undefined}
   */
  function init(e) {
    if (!(e && 3 === e.which)) {
      $(backdrop).remove();
      $(selector).each(function() {
        var $this = $(this);
        var $parent = getParent($this);
        var relatedTarget = {
          relatedTarget : this
        };
        if ($parent.hasClass("open")) {
          if (!(e && ("click" == e.type && (/input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target))))) {
            $parent.trigger(e = $.Event("hide.bs.dropdown", relatedTarget));
            if (!e.isDefaultPrevented()) {
              $this.attr("aria-expanded", "false");
              $parent.removeClass("open").trigger($.Event("hidden.bs.dropdown", relatedTarget));
            }
          }
        }
      });
    }
  }
  /**
   * @param {?} type
   * @return {?}
   */
  function setValue(type) {
    return this.each(function() {
      var $this = $(this);
      var data = $this.data("bs.dropdown");
      if (!data) {
        $this.data("bs.dropdown", data = new Dropdown(this));
      }
      if ("string" == typeof type) {
        data[type].call($this);
      }
    });
  }
  /** @type {string} */
  var backdrop = ".dropdown-backdrop";
  /** @type {string} */
  var selector = '[data-toggle="dropdown"]';
  /**
   * @param {?} element
   * @return {undefined}
   */
  var Dropdown = function(element) {
    $(element).on("click.bs.dropdown", this.toggle);
  };
  /** @type {string} */
  Dropdown.VERSION = "3.3.6";
  /**
   * @param {Object} e
   * @return {?}
   */
  Dropdown.prototype.toggle = function(e) {
    var $this = $(this);
    if (!$this.is(".disabled, :disabled")) {
      var $parent = getParent($this);
      var isActive = $parent.hasClass("open");
      if (init(), !isActive) {
        if ("ontouchstart" in document.documentElement) {
          if (!$parent.closest(".navbar-nav").length) {
            $(document.createElement("div")).addClass("dropdown-backdrop").insertAfter($(this)).on("click", init);
          }
        }
        var relatedTarget = {
          relatedTarget : this
        };
        if ($parent.trigger(e = $.Event("show.bs.dropdown", relatedTarget)), e.isDefaultPrevented()) {
          return;
        }
        $this.trigger("focus").attr("aria-expanded", "true");
        $parent.toggleClass("open").trigger($.Event("shown.bs.dropdown", relatedTarget));
      }
      return false;
    }
  };
  /**
   * @param {Event} e
   * @return {?}
   */
  Dropdown.prototype.keydown = function(e) {
    if (/(38|40|27|32)/.test(e.which) && !/input|textarea/i.test(e.target.tagName)) {
      var $this = $(this);
      if (e.preventDefault(), e.stopPropagation(), !$this.is(".disabled, :disabled")) {
        var $parent = getParent($this);
        var isActive = $parent.hasClass("open");
        if (!isActive && 27 != e.which || isActive && 27 == e.which) {
          return 27 == e.which && $parent.find(selector).trigger("focus"), $this.trigger("click");
        }
        /** @type {string} */
        var desc = " li:not(.disabled):visible a";
        var elements = $parent.find(".dropdown-menu" + desc);
        if (elements.length) {
          var index = elements.index(e.target);
          if (38 == e.which) {
            if (index > 0) {
              index--;
            }
          }
          if (40 == e.which) {
            if (index < elements.length - 1) {
              index++;
            }
          }
          if (!~index) {
            /** @type {number} */
            index = 0;
          }
          elements.eq(index).trigger("focus");
        }
      }
    }
  };
  var old = $.fn.dropdown;
  /** @type {function (?): ?} */
  $.fn.dropdown = setValue;
  /** @type {function (?): undefined} */
  $.fn.dropdown.Constructor = Dropdown;
  /**
   * @return {?}
   */
  $.fn.dropdown.noConflict = function() {
    return $.fn.dropdown = old, this;
  };
  $(document).on("click.bs.dropdown.data-api", init).on("click.bs.dropdown.data-api", ".dropdown form", function(event) {
    event.stopPropagation();
  }).on("click.bs.dropdown.data-api", selector, Dropdown.prototype.toggle).on("keydown.bs.dropdown.data-api", selector, Dropdown.prototype.keydown).on("keydown.bs.dropdown.data-api", ".dropdown-menu", Dropdown.prototype.keydown);
}(jQuery), +function($) {
  /**
   * @param {boolean} option
   * @param {Object} val
   * @return {?}
   */
  function init(option, val) {
    return this.each(function() {
      var $this = $(this);
      var data = $this.data("bs.modal");
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), "object" == typeof option && option);
      if (!data) {
        $this.data("bs.modal", data = new Modal(this, options));
      }
      if ("string" == typeof option) {
        data[option](val);
      } else {
        if (options.show) {
          data.show(val);
        }
      }
    });
  }
  /**
   * @param {?} element
   * @param {Object} options
   * @return {undefined}
   */
  var Modal = function(element, options) {
    /** @type {Object} */
    this.options = options;
    this.$body = $(document.body);
    this.$element = $(element);
    this.$dialog = this.$element.find(".modal-dialog");
    /** @type {null} */
    this.$backdrop = null;
    /** @type {null} */
    this.isShown = null;
    /** @type {null} */
    this.originalBodyPad = null;
    /** @type {number} */
    this.scrollbarWidth = 0;
    /** @type {boolean} */
    this.ignoreBackdropClick = false;
    if (this.options.remote) {
      this.$element.find(".modal-content").load(this.options.remote, $.proxy(function() {
        this.$element.trigger("loaded.bs.modal");
      }, this));
    }
  };
  /** @type {string} */
  Modal.VERSION = "3.3.6";
  /** @type {number} */
  Modal.TRANSITION_DURATION = 300;
  /** @type {number} */
  Modal.BACKDROP_TRANSITION_DURATION = 150;
  Modal.DEFAULTS = {
    backdrop : true,
    keyboard : true,
    show : true
  };
  /**
   * @param {Object} datum
   * @return {?}
   */
  Modal.prototype.toggle = function(datum) {
    return this.isShown ? this.hide() : this.show(datum);
  };
  /**
   * @param {Object} item
   * @return {undefined}
   */
  Modal.prototype.show = function(item) {
    var that = this;
    var e = $.Event("show.bs.modal", {
      relatedTarget : item
    });
    this.$element.trigger(e);
    if (!this.isShown) {
      if (!e.isDefaultPrevented()) {
        /** @type {boolean} */
        this.isShown = true;
        this.checkScrollbar();
        this.setScrollbar();
        this.$body.addClass("modal-open");
        this.escape();
        this.resize();
        this.$element.on("click.dismiss.bs.modal", '[data-dismiss="modal"]', $.proxy(this.hide, this));
        this.$dialog.on("mousedown.dismiss.bs.modal", function() {
          that.$element.one("mouseup.dismiss.bs.modal", function(ev) {
            if ($(ev.target).is(that.$element)) {
              /** @type {boolean} */
              that.ignoreBackdropClick = true;
            }
          });
        });
        this.backdrop(function() {
          var s = $.support.transition && that.$element.hasClass("fade");
          if (!that.$element.parent().length) {
            that.$element.appendTo(that.$body);
          }
          that.$element.show().scrollTop(0);
          that.adjustDialog();
          if (s) {
            that.$element[0].offsetWidth;
          }
          that.$element.addClass("in");
          that.enforceFocus();
          var details = $.Event("shown.bs.modal", {
            relatedTarget : item
          });
          if (s) {
            that.$dialog.one("bsTransitionEnd", function() {
              that.$element.trigger("focus").trigger(details);
            }).emulateTransitionEnd(Modal.TRANSITION_DURATION);
          } else {
            that.$element.trigger("focus").trigger(details);
          }
        });
      }
    }
  };
  /**
   * @param {Object} e
   * @return {undefined}
   */
  Modal.prototype.hide = function(e) {
    if (e) {
      e.preventDefault();
    }
    e = $.Event("hide.bs.modal");
    this.$element.trigger(e);
    if (this.isShown) {
      if (!e.isDefaultPrevented()) {
        /** @type {boolean} */
        this.isShown = false;
        this.escape();
        this.resize();
        $(document).off("focusin.bs.modal");
        this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal");
        this.$dialog.off("mousedown.dismiss.bs.modal");
        if ($.support.transition && this.$element.hasClass("fade")) {
          this.$element.one("bsTransitionEnd", $.proxy(this.hideModal, this)).emulateTransitionEnd(Modal.TRANSITION_DURATION);
        } else {
          this.hideModal();
        }
      }
    }
  };
  /**
   * @return {undefined}
   */
  Modal.prototype.enforceFocus = function() {
    $(document).off("focusin.bs.modal").on("focusin.bs.modal", $.proxy(function(e) {
      if (!(this.$element[0] === e.target)) {
        if (!this.$element.has(e.target).length) {
          this.$element.trigger("focus");
        }
      }
    }, this));
  };
  /**
   * @return {undefined}
   */
  Modal.prototype.escape = function() {
    if (this.isShown && this.options.keyboard) {
      this.$element.on("keydown.dismiss.bs.modal", $.proxy(function(event) {
        if (27 == event.which) {
          this.hide();
        }
      }, this));
    } else {
      if (!this.isShown) {
        this.$element.off("keydown.dismiss.bs.modal");
      }
    }
  };
  /**
   * @return {undefined}
   */
  Modal.prototype.resize = function() {
    if (this.isShown) {
      $(window).on("resize.bs.modal", $.proxy(this.handleUpdate, this));
    } else {
      $(window).off("resize.bs.modal");
    }
  };
  /**
   * @return {undefined}
   */
  Modal.prototype.hideModal = function() {
    var data = this;
    this.$element.hide();
    this.backdrop(function() {
      data.$body.removeClass("modal-open");
      data.resetAdjustments();
      data.resetScrollbar();
      data.$element.trigger("hidden.bs.modal");
    });
  };
  /**
   * @return {undefined}
   */
  Modal.prototype.removeBackdrop = function() {
    if (this.$backdrop) {
      this.$backdrop.remove();
    }
    /** @type {null} */
    this.$backdrop = null;
  };
  /**
   * @param {Function} callback
   * @return {undefined}
   */
  Modal.prototype.backdrop = function(callback) {
    var that = this;
    /** @type {string} */
    var animate = this.$element.hasClass("fade") ? "fade" : "";
    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate;
      if (this.$backdrop = $(document.createElement("div")).addClass("modal-backdrop " + animate).appendTo(this.$body), this.$element.on("click.dismiss.bs.modal", $.proxy(function(e) {
        return this.ignoreBackdropClick ? void(this.ignoreBackdropClick = false) : void(e.target === e.currentTarget && ("static" == this.options.backdrop ? this.$element[0].focus() : this.hide()));
      }, this)), doAnimate && this.$backdrop[0].offsetWidth, this.$backdrop.addClass("in"), !callback) {
        return;
      }
      if (doAnimate) {
        this.$backdrop.one("bsTransitionEnd", callback).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION);
      } else {
        callback();
      }
    } else {
      if (!this.isShown && this.$backdrop) {
        this.$backdrop.removeClass("in");
        /**
         * @return {undefined}
         */
        var removeElement = function() {
          that.removeBackdrop();
          if (callback) {
            callback();
          }
        };
        if ($.support.transition && this.$element.hasClass("fade")) {
          this.$backdrop.one("bsTransitionEnd", removeElement).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION);
        } else {
          removeElement();
        }
      } else {
        if (callback) {
          callback();
        }
      }
    }
  };
  /**
   * @return {undefined}
   */
  Modal.prototype.handleUpdate = function() {
    this.adjustDialog();
  };
  /**
   * @return {undefined}
   */
  Modal.prototype.adjustDialog = function() {
    /** @type {boolean} */
    var needsFlash = this.$element[0].scrollHeight > document.documentElement.clientHeight;
    this.$element.css({
      paddingLeft : !this.bodyIsOverflowing && needsFlash ? this.scrollbarWidth : "",
      paddingRight : this.bodyIsOverflowing && !needsFlash ? this.scrollbarWidth : ""
    });
  };
  /**
   * @return {undefined}
   */
  Modal.prototype.resetAdjustments = function() {
    this.$element.css({
      paddingLeft : "",
      paddingRight : ""
    });
  };
  /**
   * @return {undefined}
   */
  Modal.prototype.checkScrollbar = function() {
    /** @type {number} */
    var windowInnerWidth = window.innerWidth;
    if (!windowInnerWidth) {
      /** @type {(ClientRect|null)} */
      var d = document.documentElement.getBoundingClientRect();
      /** @type {number} */
      windowInnerWidth = d.right - Math.abs(d.left);
    }
    /** @type {boolean} */
    this.bodyIsOverflowing = document.body.clientWidth < windowInnerWidth;
    this.scrollbarWidth = this.measureScrollbar();
  };
  /**
   * @return {undefined}
   */
  Modal.prototype.setScrollbar = function() {
    /** @type {number} */
    var top = parseInt(this.$body.css("padding-right") || 0, 10);
    /** @type {(number|string)} */
    this.originalBodyPad = document.body.style.paddingRight || "";
    if (this.bodyIsOverflowing) {
      this.$body.css("padding-right", top + this.scrollbarWidth);
    }
  };
  /**
   * @return {undefined}
   */
  Modal.prototype.resetScrollbar = function() {
    this.$body.css("padding-right", this.originalBodyPad);
  };
  /**
   * @return {?}
   */
  Modal.prototype.measureScrollbar = function() {
    /** @type {Element} */
    var n = document.createElement("div");
    /** @type {string} */
    n.className = "modal-scrollbar-measure";
    this.$body.append(n);
    /** @type {number} */
    var e = n.offsetWidth - n.clientWidth;
    return this.$body[0].removeChild(n), e;
  };
  var old = $.fn.modal;
  /** @type {function (boolean, Object): ?} */
  $.fn.modal = init;
  /** @type {function (?, Object): undefined} */
  $.fn.modal.Constructor = Modal;
  /**
   * @return {?}
   */
  $.fn.modal.noConflict = function() {
    return $.fn.modal = old, this;
  };
  $(document).on("click.bs.modal.data-api", '[data-toggle="modal"]', function(types) {
    var $this = $(this);
    var href = $this.attr("href");
    var self = $($this.attr("data-target") || href && href.replace(/.*(?=#[^\s]+$)/, ""));
    var entityType = self.data("bs.modal") ? "toggle" : $.extend({
      remote : !/#/.test(href) && href
    }, self.data(), $this.data());
    if ($this.is("a")) {
      types.preventDefault();
    }
    self.one("show.bs.modal", function(event) {
      if (!event.isDefaultPrevented()) {
        self.one("hidden.bs.modal", function() {
          if ($this.is(":visible")) {
            $this.trigger("focus");
          }
        });
      }
    });
    init.call(self, entityType, this);
  });
}(jQuery), +function($) {
  /**
   * @param {number} arg
   * @return {?}
   */
  function initialize(arg) {
    return this.each(function() {
      var $this = $(this);
      var data = $this.data("bs.tooltip");
      var options = "object" == typeof arg && arg;
      if (data || !/destroy|hide/.test(arg)) {
        if (!data) {
          $this.data("bs.tooltip", data = new Tooltip(this, options));
        }
        if ("string" == typeof arg) {
          data[arg]();
        }
      }
    });
  }
  /**
   * @param {?} element
   * @param {boolean} options
   * @return {undefined}
   */
  var Tooltip = function(element, options) {
    /** @type {null} */
    this.type = null;
    /** @type {null} */
    this.options = null;
    /** @type {null} */
    this.enabled = null;
    /** @type {null} */
    this.timeout = null;
    /** @type {null} */
    this.hoverState = null;
    /** @type {null} */
    this.$element = null;
    /** @type {null} */
    this.inState = null;
    this.init("tooltip", element, options);
  };
  /** @type {string} */
  Tooltip.VERSION = "3.3.6";
  /** @type {number} */
  Tooltip.TRANSITION_DURATION = 150;
  Tooltip.DEFAULTS = {
    animation : true,
    placement : "top",
    selector : false,
    template : '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger : "hover focus",
    title : "",
    delay : 0,
    html : false,
    container : false,
    viewport : {
      selector : "body",
      padding : 0
    }
  };
  /**
   * @param {string} type
   * @param {?} element
   * @param {boolean} options
   * @return {undefined}
   */
  Tooltip.prototype.init = function(type, element, options) {
    if (this.enabled = true, this.type = type, this.$element = $(element), this.options = this.getOptions(options), this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : this.options.viewport.selector || this.options.viewport), this.inState = {
      click : false,
      hover : false,
      focus : false
    }, this.$element[0] instanceof document.constructor && !this.options.selector) {
      throw new Error("`selector` option must be specified when initializing " + this.type + " on the window.document object!");
    }
    var params = this.options.trigger.split(" ");
    var l = params.length;
    for (;l--;) {
      var param = params[l];
      if ("click" == param) {
        this.$element.on("click." + this.type, this.options.selector, $.proxy(this.toggle, this));
      } else {
        if ("manual" != param) {
          /** @type {string} */
          var eventIn = "hover" == param ? "mouseenter" : "focusin";
          /** @type {string} */
          var eventOut = "hover" == param ? "mouseleave" : "focusout";
          this.$element.on(eventIn + "." + this.type, this.options.selector, $.proxy(this.enter, this));
          this.$element.on(eventOut + "." + this.type, this.options.selector, $.proxy(this.leave, this));
        }
      }
    }
    if (this.options.selector) {
      this._options = $.extend({}, this.options, {
        trigger : "manual",
        selector : ""
      });
    } else {
      this.fixTitle();
    }
  };
  /**
   * @return {?}
   */
  Tooltip.prototype.getDefaults = function() {
    return Tooltip.DEFAULTS;
  };
  /**
   * @param {boolean} options
   * @return {?}
   */
  Tooltip.prototype.getOptions = function(options) {
    return options = $.extend({}, this.getDefaults(), this.$element.data(), options), options.delay && ("number" == typeof options.delay && (options.delay = {
      show : options.delay,
      hide : options.delay
    })), options;
  };
  /**
   * @return {?}
   */
  Tooltip.prototype.getDelegateOptions = function() {
    var flags = {};
    var defaults = this.getDefaults();
    return this._options && $.each(this._options, function(key, value) {
      if (defaults[key] != value) {
        flags[key] = value;
      }
    }), flags;
  };
  /**
   * @param {Object} obj
   * @return {?}
   */
  Tooltip.prototype.enter = function(obj) {
    var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data("bs." + this.type);
    return self || (self = new this.constructor(obj.currentTarget, this.getDelegateOptions()), $(obj.currentTarget).data("bs." + this.type, self)), obj instanceof $.Event && (self.inState["focusin" == obj.type ? "focus" : "hover"] = true), self.tip().hasClass("in") || "in" == self.hoverState ? void(self.hoverState = "in") : (clearTimeout(self.timeout), self.hoverState = "in", self.options.delay && self.options.delay.show ? void(self.timeout = setTimeout(function() {
      if ("in" == self.hoverState) {
        self.show();
      }
    }, self.options.delay.show)) : self.show());
  };
  /**
   * @return {?}
   */
  Tooltip.prototype.isInStateTrue = function() {
    var unlock;
    for (unlock in this.inState) {
      if (this.inState[unlock]) {
        return true;
      }
    }
    return false;
  };
  /**
   * @param {Object} obj
   * @return {?}
   */
  Tooltip.prototype.leave = function(obj) {
    var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data("bs." + this.type);
    return self || (self = new this.constructor(obj.currentTarget, this.getDelegateOptions()), $(obj.currentTarget).data("bs." + this.type, self)), obj instanceof $.Event && (self.inState["focusout" == obj.type ? "focus" : "hover"] = false), self.isInStateTrue() ? void 0 : (clearTimeout(self.timeout), self.hoverState = "out", self.options.delay && self.options.delay.hide ? void(self.timeout = setTimeout(function() {
      if ("out" == self.hoverState) {
        self.hide();
      }
    }, self.options.delay.hide)) : self.hide());
  };
  /**
   * @return {undefined}
   */
  Tooltip.prototype.show = function() {
    var e = $.Event("show.bs." + this.type);
    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e);
      var o = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]);
      if (e.isDefaultPrevented() || !o) {
        return;
      }
      var self = this;
      var $tip = this.tip();
      var removeElement = this.getUID(this.type);
      this.setContent();
      $tip.attr("id", removeElement);
      this.$element.attr("aria-describedby", removeElement);
      if (this.options.animation) {
        $tip.addClass("fade");
      }
      var placement = "function" == typeof this.options.placement ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;
      /** @type {RegExp} */
      var autoToken = /\s?auto?\s?/i;
      /** @type {boolean} */
      var autoPlace = autoToken.test(placement);
      if (autoPlace) {
        placement = placement.replace(autoToken, "") || "top";
      }
      $tip.detach().css({
        top : 0,
        left : 0,
        display : "block"
      }).addClass(placement).data("bs." + this.type, this);
      if (this.options.container) {
        $tip.appendTo(this.options.container);
      } else {
        $tip.insertAfter(this.$element);
      }
      this.$element.trigger("inserted.bs." + this.type);
      var pos = this.getPosition();
      var actualWidth = $tip[0].offsetWidth;
      var actualHeight = $tip[0].offsetHeight;
      if (autoPlace) {
        var orgPlacement = placement;
        var p = this.getPosition(this.$viewport);
        placement = "bottom" == placement && pos.bottom + actualHeight > p.bottom ? "top" : "top" == placement && pos.top - actualHeight < p.top ? "bottom" : "right" == placement && pos.right + actualWidth > p.width ? "left" : "left" == placement && pos.left - actualWidth < p.left ? "right" : placement;
        $tip.removeClass(orgPlacement).addClass(placement);
      }
      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);
      this.applyPlacement(calculatedOffset, placement);
      /**
       * @return {undefined}
       */
      var complete = function() {
        var text = self.hoverState;
        self.$element.trigger("shown.bs." + self.type);
        /** @type {null} */
        self.hoverState = null;
        if ("out" == text) {
          self.leave(self);
        }
      };
      if ($.support.transition && this.$tip.hasClass("fade")) {
        $tip.one("bsTransitionEnd", complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION);
      } else {
        complete();
      }
    }
  };
  /**
   * @param {?} offset
   * @param {string} placement
   * @return {undefined}
   */
  Tooltip.prototype.applyPlacement = function(offset, placement) {
    var $tip = this.tip();
    var x = $tip[0].offsetWidth;
    var height = $tip[0].offsetHeight;
    /** @type {number} */
    var top = parseInt($tip.css("margin-top"), 10);
    /** @type {number} */
    var left = parseInt($tip.css("margin-left"), 10);
    if (isNaN(top)) {
      /** @type {number} */
      top = 0;
    }
    if (isNaN(left)) {
      /** @type {number} */
      left = 0;
    }
    offset.top += top;
    offset.left += left;
    $.offset.setOffset($tip[0], $.extend({
      /**
       * @param {?} props
       * @return {undefined}
       */
      using : function(props) {
        $tip.css({
          top : Math.round(props.top),
          left : Math.round(props.left)
        });
      }
    }, offset), 0);
    $tip.addClass("in");
    var udataCur = $tip[0].offsetWidth;
    var actualHeight = $tip[0].offsetHeight;
    if ("top" == placement) {
      if (actualHeight != height) {
        /** @type {number} */
        offset.top = offset.top + height - actualHeight;
      }
    }
    var relOffset = this.getViewportAdjustedDelta(placement, offset, udataCur, actualHeight);
    if (relOffset.left) {
      offset.left += relOffset.left;
    } else {
      offset.top += relOffset.top;
    }
    /** @type {boolean} */
    var isHorizontal = /top|bottom/.test(placement);
    var _position = isHorizontal ? 2 * relOffset.left - x + udataCur : 2 * relOffset.top - height + actualHeight;
    /** @type {string} */
    var sizingDomProperty = isHorizontal ? "offsetWidth" : "offsetHeight";
    $tip.offset(offset);
    this.replaceArrow(_position, $tip[0][sizingDomProperty], isHorizontal);
  };
  /**
   * @param {number} position
   * @param {number} dimension
   * @param {boolean} horizontal
   * @return {undefined}
   */
  Tooltip.prototype.replaceArrow = function(position, dimension, horizontal) {
    this.arrow().css(horizontal ? "left" : "top", 50 * (1 - position / dimension) + "%").css(horizontal ? "top" : "left", "");
  };
  /**
   * @return {undefined}
   */
  Tooltip.prototype.setContent = function() {
    var $tip = this.tip();
    var title = this.getTitle();
    $tip.find(".tooltip-inner")[this.options.html ? "html" : "text"](title);
    $tip.removeClass("fade in top bottom left right");
  };
  /**
   * @param {Object} item
   * @return {?}
   */
  Tooltip.prototype.hide = function(item) {
    /**
     * @return {undefined}
     */
    function complete() {
      if ("in" != self.hoverState) {
        $tip.detach();
      }
      self.$element.removeAttr("aria-describedby").trigger("hidden.bs." + self.type);
      if (item) {
        item();
      }
    }
    var self = this;
    var $tip = $(this.$tip);
    var e = $.Event("hide.bs." + this.type);
    return this.$element.trigger(e), e.isDefaultPrevented() ? void 0 : ($tip.removeClass("in"), $.support.transition && $tip.hasClass("fade") ? $tip.one("bsTransitionEnd", complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete(), this.hoverState = null, this);
  };
  /**
   * @return {undefined}
   */
  Tooltip.prototype.fixTitle = function() {
    var $e = this.$element;
    if ($e.attr("title") || "string" != typeof $e.attr("data-original-title")) {
      $e.attr("data-original-title", $e.attr("title") || "").attr("title", "");
    }
  };
  /**
   * @return {?}
   */
  Tooltip.prototype.hasContent = function() {
    return this.getTitle();
  };
  /**
   * @param {Object} $element
   * @return {?}
   */
  Tooltip.prototype.getPosition = function($element) {
    $element = $element || this.$element;
    var el = $element[0];
    /** @type {boolean} */
    var bShow = "BODY" == el.tagName;
    var rect = el.getBoundingClientRect();
    if (null == rect.width) {
      rect = $.extend({}, rect, {
        width : rect.right - rect.left,
        height : rect.bottom - rect.top
      });
    }
    var platformVersions = bShow ? {
      top : 0,
      left : 0
    } : $element.offset();
    var copy = {
      scroll : bShow ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop()
    };
    /** @type {(null|{height: ?, width: ?})} */
    var newOpts = bShow ? {
      width : $(window).width(),
      height : $(window).height()
    } : null;
    return $.extend({}, rect, copy, newOpts, platformVersions);
  };
  /**
   * @param {string} str
   * @param {?} pos
   * @param {number} actualWidth
   * @param {number} actualHeight
   * @return {?}
   */
  Tooltip.prototype.getCalculatedOffset = function(str, pos, actualWidth, actualHeight) {
    return "bottom" == str ? {
      top : pos.top + pos.height,
      left : pos.left + pos.width / 2 - actualWidth / 2
    } : "top" == str ? {
      top : pos.top - actualHeight,
      left : pos.left + pos.width / 2 - actualWidth / 2
    } : "left" == str ? {
      top : pos.top + pos.height / 2 - actualHeight / 2,
      left : pos.left - actualWidth
    } : {
      top : pos.top + pos.height / 2 - actualHeight / 2,
      left : pos.left + pos.width
    };
  };
  /**
   * @param {string} placement
   * @param {?} layout
   * @param {?} value
   * @param {number} actualHeight
   * @return {?}
   */
  Tooltip.prototype.getViewportAdjustedDelta = function(placement, layout, value, actualHeight) {
    var result = {
      top : 0,
      left : 0
    };
    if (!this.$viewport) {
      return result;
    }
    var bounce = this.options.viewport && this.options.viewport.padding || 0;
    var p = this.getPosition(this.$viewport);
    if (/right|left/.test(placement)) {
      /** @type {number} */
      var y = layout.top - bounce - p.scroll;
      var imageHeight = layout.top + bounce - p.scroll + actualHeight;
      if (y < p.top) {
        /** @type {number} */
        result.top = p.top - y;
      } else {
        if (imageHeight > p.top + p.height) {
          /** @type {number} */
          result.top = p.top + p.height - imageHeight;
        }
      }
    } else {
      /** @type {number} */
      var x = layout.left - bounce;
      var position = layout.left + bounce + value;
      if (x < p.left) {
        /** @type {number} */
        result.left = p.left - x;
      } else {
        if (position > p.right) {
          /** @type {number} */
          result.left = p.left + p.width - position;
        }
      }
    }
    return result;
  };
  /**
   * @return {?}
   */
  Tooltip.prototype.getTitle = function() {
    var t;
    var $e = this.$element;
    var o = this.options;
    return t = $e.attr("data-original-title") || ("function" == typeof o.title ? o.title.call($e[0]) : o.title);
  };
  /**
   * @param {number} id
   * @return {?}
   */
  Tooltip.prototype.getUID = function(id) {
    do {
      id += ~~(1E6 * Math.random());
    } while (document.getElementById(id));
    return id;
  };
  /**
   * @return {?}
   */
  Tooltip.prototype.tip = function() {
    if (!this.$tip && (this.$tip = $(this.options.template), 1 != this.$tip.length)) {
      throw new Error(this.type + " `template` option must consist of exactly 1 top-level element!");
    }
    return this.$tip;
  };
  /**
   * @return {?}
   */
  Tooltip.prototype.arrow = function() {
    return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow");
  };
  /**
   * @return {undefined}
   */
  Tooltip.prototype.enable = function() {
    /** @type {boolean} */
    this.enabled = true;
  };
  /**
   * @return {undefined}
   */
  Tooltip.prototype.disable = function() {
    /** @type {boolean} */
    this.enabled = false;
  };
  /**
   * @return {undefined}
   */
  Tooltip.prototype.toggleEnabled = function() {
    /** @type {boolean} */
    this.enabled = !this.enabled;
  };
  /**
   * @param {Event} e
   * @return {undefined}
   */
  Tooltip.prototype.toggle = function(e) {
    var self = this;
    if (e) {
      self = $(e.currentTarget).data("bs." + this.type);
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions());
        $(e.currentTarget).data("bs." + this.type, self);
      }
    }
    if (e) {
      /** @type {boolean} */
      self.inState.click = !self.inState.click;
      if (self.isInStateTrue()) {
        self.enter(self);
      } else {
        self.leave(self);
      }
    } else {
      if (self.tip().hasClass("in")) {
        self.leave(self);
      } else {
        self.enter(self);
      }
    }
  };
  /**
   * @return {undefined}
   */
  Tooltip.prototype.destroy = function() {
    var self = this;
    clearTimeout(this.timeout);
    this.hide(function() {
      self.$element.off("." + self.type).removeData("bs." + self.type);
      if (self.$tip) {
        self.$tip.detach();
      }
      /** @type {null} */
      self.$tip = null;
      /** @type {null} */
      self.$arrow = null;
      /** @type {null} */
      self.$viewport = null;
    });
  };
  var old = $.fn.tooltip;
  /** @type {function (number): ?} */
  $.fn.tooltip = initialize;
  /** @type {function (?, boolean): undefined} */
  $.fn.tooltip.Constructor = Tooltip;
  /**
   * @return {?}
   */
  $.fn.tooltip.noConflict = function() {
    return $.fn.tooltip = old, this;
  };
}(jQuery), +function($) {
  /**
   * @param {number} arg
   * @return {?}
   */
  function initialize(arg) {
    return this.each(function() {
      var $this = $(this);
      var data = $this.data("bs.popover");
      var options = "object" == typeof arg && arg;
      if (data || !/destroy|hide/.test(arg)) {
        if (!data) {
          $this.data("bs.popover", data = new Popover(this, options));
        }
        if ("string" == typeof arg) {
          data[arg]();
        }
      }
    });
  }
  /**
   * @param {?} element
   * @param {boolean} options
   * @return {undefined}
   */
  var Popover = function(element, options) {
    this.init("popover", element, options);
  };
  if (!$.fn.tooltip) {
    throw new Error("Popover requires tooltip.js");
  }
  /** @type {string} */
  Popover.VERSION = "3.3.6";
  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement : "right",
    trigger : "click",
    content : "",
    template : '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  });
  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype);
  /** @type {function (?, boolean): undefined} */
  Popover.prototype.constructor = Popover;
  /**
   * @return {?}
   */
  Popover.prototype.getDefaults = function() {
    return Popover.DEFAULTS;
  };
  /**
   * @return {undefined}
   */
  Popover.prototype.setContent = function() {
    var $tip = this.tip();
    var title = this.getTitle();
    var err = this.getContent();
    $tip.find(".popover-title")[this.options.html ? "html" : "text"](title);
    $tip.find(".popover-content").children().detach().end()[this.options.html ? "string" == typeof err ? "html" : "append" : "text"](err);
    $tip.removeClass("fade top bottom left right in");
    if (!$tip.find(".popover-title").html()) {
      $tip.find(".popover-title").hide();
    }
  };
  /**
   * @return {?}
   */
  Popover.prototype.hasContent = function() {
    return this.getTitle() || this.getContent();
  };
  /**
   * @return {?}
   */
  Popover.prototype.getContent = function() {
    var $e = this.$element;
    var o = this.options;
    return $e.attr("data-content") || ("function" == typeof o.content ? o.content.call($e[0]) : o.content);
  };
  /**
   * @return {?}
   */
  Popover.prototype.arrow = function() {
    return this.$arrow = this.$arrow || this.tip().find(".arrow");
  };
  var old = $.fn.popover;
  /** @type {function (number): ?} */
  $.fn.popover = initialize;
  /** @type {function (?, boolean): undefined} */
  $.fn.popover.Constructor = Popover;
  /**
   * @return {?}
   */
  $.fn.popover.noConflict = function() {
    return $.fn.popover = old, this;
  };
}(jQuery), +function($) {
  /**
   * @param {Object} element
   * @param {?} options
   * @return {undefined}
   */
  function ScrollSpy(element, options) {
    this.$body = $(document.body);
    this.$scrollElement = $($(element).is(document.body) ? window : element);
    this.options = $.extend({}, ScrollSpy.DEFAULTS, options);
    /** @type {string} */
    this.selector = (this.options.target || "") + " .nav li > a";
    /** @type {Array} */
    this.offsets = [];
    /** @type {Array} */
    this.targets = [];
    /** @type {null} */
    this.activeTarget = null;
    /** @type {number} */
    this.scrollHeight = 0;
    this.$scrollElement.on("scroll.bs.scrollspy", $.proxy(this.process, this));
    this.refresh();
    this.process();
  }
  /**
   * @param {number} arg
   * @return {?}
   */
  function init(arg) {
    return this.each(function() {
      var $this = $(this);
      var data = $this.data("bs.scrollspy");
      var options = "object" == typeof arg && arg;
      if (!data) {
        $this.data("bs.scrollspy", data = new ScrollSpy(this, options));
      }
      if ("string" == typeof arg) {
        data[arg]();
      }
    });
  }
  /** @type {string} */
  ScrollSpy.VERSION = "3.3.6";
  ScrollSpy.DEFAULTS = {
    offset : 10
  };
  /**
   * @return {?}
   */
  ScrollSpy.prototype.getScrollHeight = function() {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight);
  };
  /**
   * @return {undefined}
   */
  ScrollSpy.prototype.refresh = function() {
    var self = this;
    /** @type {string} */
    var i = "offset";
    /** @type {number} */
    var nub_height = 0;
    /** @type {Array} */
    this.offsets = [];
    /** @type {Array} */
    this.targets = [];
    this.scrollHeight = this.getScrollHeight();
    if (!$.isWindow(this.$scrollElement[0])) {
      /** @type {string} */
      i = "position";
      nub_height = this.$scrollElement.scrollTop();
    }
    this.$body.find(this.selector).map(function() {
      var $el = $(this);
      var href = $el.data("target") || $el.attr("href");
      var codeSegments = /^#./.test(href) && $(href);
      return codeSegments && (codeSegments.length && (codeSegments.is(":visible") && [[codeSegments[i]().top + nub_height, href]])) || null;
    }).sort(function(mat0, mat1) {
      return mat0[0] - mat1[0];
    }).each(function() {
      self.offsets.push(this[0]);
      self.targets.push(this[1]);
    });
  };
  /**
   * @return {?}
   */
  ScrollSpy.prototype.process = function() {
    var i;
    var scrollTop = this.$scrollElement.scrollTop() + this.options.offset;
    var offset = this.getScrollHeight();
    /** @type {number} */
    var maxScroll = this.options.offset + offset - this.$scrollElement.height();
    var offsets = this.offsets;
    var targets = this.targets;
    var activeTarget = this.activeTarget;
    if (this.scrollHeight != offset && this.refresh(), scrollTop >= maxScroll) {
      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i);
    }
    if (activeTarget && scrollTop < offsets[0]) {
      return this.activeTarget = null, this.clear();
    }
    i = offsets.length;
    for (;i--;) {
      if (activeTarget != targets[i]) {
        if (scrollTop >= offsets[i]) {
          if (void 0 === offsets[i + 1] || scrollTop < offsets[i + 1]) {
            this.activate(targets[i]);
          }
        }
      }
    }
  };
  /**
   * @param {Error} target
   * @return {undefined}
   */
  ScrollSpy.prototype.activate = function(target) {
    /** @type {Error} */
    this.activeTarget = target;
    this.clear();
    /** @type {string} */
    var selector = this.selector + '[data-target="' + target + '"],' + this.selector + '[href="' + target + '"]';
    var active = $(selector).parents("li").addClass("active");
    if (active.parent(".dropdown-menu").length) {
      active = active.closest("li.dropdown").addClass("active");
    }
    active.trigger("activate.bs.scrollspy");
  };
  /**
   * @return {undefined}
   */
  ScrollSpy.prototype.clear = function() {
    $(this.selector).parentsUntil(this.options.target, ".active").removeClass("active");
  };
  var old = $.fn.scrollspy;
  /** @type {function (number): ?} */
  $.fn.scrollspy = init;
  /** @type {function (Object, ?): undefined} */
  $.fn.scrollspy.Constructor = ScrollSpy;
  /**
   * @return {?}
   */
  $.fn.scrollspy.noConflict = function() {
    return $.fn.scrollspy = old, this;
  };
  $(window).on("load.bs.scrollspy.data-api", function() {
    $('[data-spy="scroll"]').each(function() {
      var self = $(this);
      init.call(self, self.data());
    });
  });
}(jQuery), +function($) {
  /**
   * @param {?} selector
   * @return {?}
   */
  function init(selector) {
    return this.each(function() {
      var $this = $(this);
      var data = $this.data("bs.tab");
      if (!data) {
        $this.data("bs.tab", data = new Tab(this));
      }
      if ("string" == typeof selector) {
        data[selector]();
      }
    });
  }
  /**
   * @param {?} element
   * @return {undefined}
   */
  var Tab = function(element) {
    this.element = $(element);
  };
  /** @type {string} */
  Tab.VERSION = "3.3.6";
  /** @type {number} */
  Tab.TRANSITION_DURATION = 150;
  /**
   * @return {undefined}
   */
  Tab.prototype.show = function() {
    var $this = this.element;
    var $ul = $this.closest("ul:not(.dropdown-menu)");
    var selector = $this.data("target");
    if (selector || (selector = $this.attr("href"), selector = selector && selector.replace(/.*(?=#[^\s]*$)/, "")), !$this.parent("li").hasClass("active")) {
      var elements = $ul.find(".active:last a");
      var e = $.Event("hide.bs.tab", {
        relatedTarget : $this[0]
      });
      var addingEvent = $.Event("show.bs.tab", {
        relatedTarget : elements[0]
      });
      if (elements.trigger(e), $this.trigger(addingEvent), !addingEvent.isDefaultPrevented() && !e.isDefaultPrevented()) {
        var $target = $(selector);
        this.activate($this.closest("li"), $ul);
        this.activate($target, $target.parent(), function() {
          elements.trigger({
            type : "hidden.bs.tab",
            relatedTarget : $this[0]
          });
          $this.trigger({
            type : "shown.bs.tab",
            relatedTarget : elements[0]
          });
        });
      }
    }
  };
  /**
   * @param {Object} element
   * @param {Object} container
   * @param {Object} callback
   * @return {undefined}
   */
  Tab.prototype.activate = function(element, container, callback) {
    /**
     * @return {undefined}
     */
    function next() {
      $active.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", false);
      element.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded", true);
      if (showAddButton) {
        element[0].offsetWidth;
        element.addClass("in");
      } else {
        element.removeClass("fade");
      }
      if (element.parent(".dropdown-menu").length) {
        element.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", true);
      }
      if (callback) {
        callback();
      }
    }
    var $active = container.find("> .active");
    var showAddButton = callback && ($.support.transition && ($active.length && $active.hasClass("fade") || !!container.find("> .fade").length));
    if ($active.length && showAddButton) {
      $active.one("bsTransitionEnd", next).emulateTransitionEnd(Tab.TRANSITION_DURATION);
    } else {
      next();
    }
    $active.removeClass("in");
  };
  var old = $.fn.tab;
  /** @type {function (?): ?} */
  $.fn.tab = init;
  /** @type {function (?): undefined} */
  $.fn.tab.Constructor = Tab;
  /**
   * @return {?}
   */
  $.fn.tab.noConflict = function() {
    return $.fn.tab = old, this;
  };
  /**
   * @param {?} event
   * @return {undefined}
   */
  var stop = function(event) {
    event.preventDefault();
    init.call($(this), "show");
  };
  $(document).on("click.bs.tab.data-api", '[data-toggle="tab"]', stop).on("click.bs.tab.data-api", '[data-toggle="pill"]', stop);
}(jQuery), +function($) {
  /**
   * @param {number} arg
   * @return {?}
   */
  function init(arg) {
    return this.each(function() {
      var $this = $(this);
      var data = $this.data("bs.affix");
      var options = "object" == typeof arg && arg;
      if (!data) {
        $this.data("bs.affix", data = new Affix(this, options));
      }
      if ("string" == typeof arg) {
        data[arg]();
      }
    });
  }
  /**
   * @param {?} element
   * @param {?} options
   * @return {undefined}
   */
  var Affix = function(element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options);
    this.$target = $(this.options.target).on("scroll.bs.affix.data-api", $.proxy(this.checkPosition, this)).on("click.bs.affix.data-api", $.proxy(this.checkPositionWithEventLoop, this));
    this.$element = $(element);
    /** @type {null} */
    this.affixed = null;
    /** @type {null} */
    this.unpin = null;
    /** @type {null} */
    this.pinnedOffset = null;
    this.checkPosition();
  };
  /** @type {string} */
  Affix.VERSION = "3.3.6";
  /** @type {string} */
  Affix.RESET = "affix affix-top affix-bottom";
  Affix.DEFAULTS = {
    offset : 0,
    target : window
  };
  /**
   * @param {number} el
   * @param {?} value
   * @param {number} a
   * @param {number} v12
   * @return {?}
   */
  Affix.prototype.getState = function(el, value, a, v12) {
    var b = this.$target.scrollTop();
    var position = this.$element.offset();
    var _ = this.$target.height();
    if (null != a && "top" == this.affixed) {
      return a > b ? "top" : false;
    }
    if ("bottom" == this.affixed) {
      return null != a ? b + this.unpin <= position.top ? false : "bottom" : el - v12 >= b + _ ? false : "bottom";
    }
    /** @type {boolean} */
    var escape = null == this.affixed;
    var memo = escape ? b : position.top;
    var str = escape ? _ : value;
    return null != a && a >= b ? "top" : null != v12 && memo + str >= el - v12 ? "bottom" : false;
  };
  /**
   * @return {?}
   */
  Affix.prototype.getPinnedOffset = function() {
    if (this.pinnedOffset) {
      return this.pinnedOffset;
    }
    this.$element.removeClass(Affix.RESET).addClass("affix");
    var scrollTop = this.$target.scrollTop();
    var position = this.$element.offset();
    return this.pinnedOffset = position.top - scrollTop;
  };
  /**
   * @return {undefined}
   */
  Affix.prototype.checkPositionWithEventLoop = function() {
    setTimeout($.proxy(this.checkPosition, this), 1);
  };
  /**
   * @return {undefined}
   */
  Affix.prototype.checkPosition = function() {
    if (this.$element.is(":visible")) {
      var udataCur = this.$element.height();
      var n = this.options.offset;
      var a = n.top;
      var b = n.bottom;
      /** @type {number} */
      var failuresLink = Math.max($(document).height(), $(document.body).height());
      if ("object" != typeof n) {
        b = a = n;
      }
      if ("function" == typeof a) {
        a = n.top(this.$element);
      }
      if ("function" == typeof b) {
        b = n.bottom(this.$element);
      }
      var affix = this.getState(failuresLink, udataCur, a, b);
      if (this.affixed != affix) {
        if (null != this.unpin) {
          this.$element.css("top", "");
        }
        /** @type {string} */
        var affixType = "affix" + (affix ? "-" + affix : "");
        var e = $.Event(affixType + ".bs.affix");
        if (this.$element.trigger(e), e.isDefaultPrevented()) {
          return;
        }
        this.affixed = affix;
        this.unpin = "bottom" == affix ? this.getPinnedOffset() : null;
        this.$element.removeClass(Affix.RESET).addClass(affixType).trigger(affixType.replace("affix", "affixed") + ".bs.affix");
      }
      if ("bottom" == affix) {
        this.$element.offset({
          top : failuresLink - udataCur - b
        });
      }
    }
  };
  var old = $.fn.affix;
  /** @type {function (number): ?} */
  $.fn.affix = init;
  /** @type {function (?, ?): undefined} */
  $.fn.affix.Constructor = Affix;
  /**
   * @return {?}
   */
  $.fn.affix.noConflict = function() {
    return $.fn.affix = old, this;
  };
  $(window).on("load", function() {
    $('[data-spy="affix"]').each(function() {
      var self = $(this);
      var options = self.data();
      options.offset = options.offset || {};
      if (null != options.offsetBottom) {
        options.offset.bottom = options.offsetBottom;
      }
      if (null != options.offsetTop) {
        options.offset.top = options.offsetTop;
      }
      init.call(self, options);
    });
  });
}(jQuery), function($) {
  /**
   * @param {Object} o
   * @return {?}
   */
  $.fn.lavaLamp = function(o) {
    return o = $.extend({
      fx : "linear",
      speed : 500,
      /**
       * @return {undefined}
       */
      click : function() {
      }
    }, o || {}), this.each(function() {
      /**
       * @param {?} selector
       * @return {undefined}
       */
      function initialize(selector) {
        var q = $(selector).children("a");
        $img.css({
          left : q.offset().left - $(selector).parent().offset().left,
          width : q.width()
        });
        opts = selector;
      }
      /**
       * @param {?} selector
       * @return {undefined}
       */
      function init(selector) {
        var q = $(selector).children("a");
        $img.each(function() {
          $.dequeue(this, "fx");
        }).animate({
          width : q.width(),
          left : q.offset().left - $(selector).parent().offset().left
        }, o.speed, o.fx);
      }
      var $cache = $(this);
      /**
       * @return {undefined}
       */
      var hover = function() {
      };
      var $img = $('<li class="back"><div class="left"></div></li>').appendTo($cache);
      var $li = $("li", this);
      var opts = $("li.current", this)[0] || $($li[0]).addClass("current")[0];
      $li.not(".back").hover(function() {
        init(this);
		$(".subCategories ul li.back").show();
      }, hover);
      $(this).hover(hover, function() {
        init(opts);
		$(".subCategories ul li.back").hide();
      });
      $li.click(function(itemId) {
        return initialize(this), o.click.apply(this, [itemId, this]);
      });
      initialize(opts);
    });
  };
}(jQuery), function(context, predicate) {
  if ("function" == typeof define && define.amd) {
    define([], function() {
      return predicate.apply(context);
    });
  } else {
    if ("object" == typeof exports) {
      module.exports = predicate.call(context);
    } else {
      context.Waves = predicate.call(context);
    }
  }
}("object" == typeof global ? global : this, function() {
  /**
   * @param {Object} obj
   * @return {?}
   */
  function isWindow(obj) {
    return null !== obj && obj === obj.window;
  }
  /**
   * @param {Object} elem
   * @return {?}
   */
  function getWindow(elem) {
    return isWindow(elem) ? elem : 9 === elem.nodeType && elem.defaultView;
  }
  /**
   * @param {Object} callback
   * @return {?}
   */
  function keys(callback) {
    /** @type {string} */
    var type = typeof callback;
    return "function" === type || "object" === type && !!callback;
  }
  /**
   * @param {Object} object
   * @return {?}
   */
  function forOwn(object) {
    return keys(object) && object.nodeType > 0;
  }
  /**
   * @param {Object} object
   * @return {?}
   */
  function each(object) {
    /** @type {string} */
    var value = _toString.call(object);
    return "[object String]" === value ? eachKey(object) : keys(object) && (/^\[object (Array|HTMLCollection|NodeList|Object)\]$/.test(value) && object.hasOwnProperty("length")) ? object : forOwn(object) ? [object] : [];
  }
  /**
   * @param {Object} element
   * @return {?}
   */
  function getOffset(element) {
    var docElem;
    var win;
    var box = {
      top : 0,
      left : 0
    };
    var doc = element && element.ownerDocument;
    return docElem = doc.documentElement, "undefined" != typeof element.getBoundingClientRect && (box = element.getBoundingClientRect()), win = getWindow(doc), {
      top : box.top + win.pageYOffset - docElem.clientTop,
      left : box.left + win.pageXOffset - docElem.clientLeft
    };
  }
  /**
   * @param {Object} query
   * @return {?}
   */
  function $(query) {
    /** @type {string} */
    var ret = "";
    var part;
    for (part in query) {
      if (query.hasOwnProperty(part)) {
        ret += part + ":" + query[part] + ";";
      }
    }
    return ret;
  }
  /**
   * @param {Object} event
   * @param {Object} d
   * @param {Element} div
   * @return {undefined}
   */
  function start(event, d, div) {
    if (div) {
      div.classList.remove("waves-rippling");
      var x = div.getAttribute("data-x");
      var y = div.getAttribute("data-y");
      var type = div.getAttribute("data-scale");
      var pageX = div.getAttribute("data-translate");
      /** @type {number} */
      var clientLeft = Date.now() - Number(div.getAttribute("data-hold"));
      /** @type {number} */
      var left = 350 - clientLeft;
      if (0 > left) {
        /** @type {number} */
        left = 0;
      }
      if ("mousemove" === event.type) {
        /** @type {number} */
        left = 150;
      }
      /** @type {number} */
      var time = "mousemove" === event.type ? 2500 : options.duration;
      setTimeout(function() {
        var reset = {
          top : y + "px",
          left : x + "px",
          opacity : "0",
          "-webkit-transition-duration" : time + "ms",
          "-moz-transition-duration" : time + "ms",
          "-o-transition-duration" : time + "ms",
          "transition-duration" : time + "ms",
          "-webkit-transform" : type + " " + pageX,
          "-moz-transform" : type + " " + pageX,
          "-ms-transform" : type + " " + pageX,
          "-o-transform" : type + " " + pageX,
          transform : type + " " + pageX
        };
        div.setAttribute("style", $(reset));
        setTimeout(function() {
          try {
            d.removeChild(div);
          } catch (t) {
            return false;
          }
        }, time);
      }, left);
    }
  }
  /**
   * @param {Object} event
   * @return {?}
   */
  function success(event) {
    if (that.allowEvent(event) === false) {
      return null;
    }
    /** @type {null} */
    var value = null;
    var el = event.target || event.srcElement;
    for (;null !== el.parentElement;) {
      if (el.classList.contains("waves-effect") && !(el instanceof SVGElement)) {
        value = el;
        break;
      }
      el = el.parentElement;
    }
    return value;
  }
  /**
   * @param {Object} e
   * @return {undefined}
   */
  function init(e) {
    var element = success(e);
    if (null !== element) {
      if (element.disabled || (element.getAttribute("disabled") || element.classList.contains("disabled"))) {
        return;
      }
      if (that.registerEvent(e), "touchstart" === e.type && options.delay) {
        /** @type {boolean} */
        var i = false;
        /** @type {number} */
        var to = setTimeout(function() {
          /** @type {null} */
          to = null;
          options.show(e, element);
        }, options.delay);
        /**
         * @param {Object} target
         * @return {undefined}
         */
        var render = function(target) {
          if (to) {
            clearTimeout(to);
            /** @type {null} */
            to = null;
            options.show(e, element);
          }
          if (!i) {
            /** @type {boolean} */
            i = true;
            options.hide(target, element);
          }
        };
        /**
         * @param {Object} value
         * @return {undefined}
         */
        var onKeyDown = function(value) {
          if (to) {
            clearTimeout(to);
            /** @type {null} */
            to = null;
          }
          render(value);
        };
        element.addEventListener("touchmove", onKeyDown, false);
        element.addEventListener("touchend", render, false);
        element.addEventListener("touchcancel", render, false);
      } else {
        options.show(e, element);
        if (hasTouch) {
          element.addEventListener("touchend", options.hide, false);
          element.addEventListener("touchcancel", options.hide, false);
        }
        element.addEventListener("mouseup", options.hide, false);
        element.addEventListener("mouseleave", options.hide, false);
      }
    }
  }
  var f = f || {};
  var eachKey = document.querySelectorAll.bind(document);
  /** @type {function (this:*): string} */
  var _toString = Object.prototype.toString;
  /** @type {boolean} */
  var hasTouch = "ontouchstart" in window;
  var options = {
    duration : 750,
    delay : 200,
    /**
     * @param {Object} e
     * @param {Object} elm
     * @param {?} vars
     * @return {?}
     */
    show : function(e, elm, vars) {
      if (2 === e.button) {
        return false;
      }
      elm = elm || this;
      /** @type {Element} */
      var div = document.createElement("div");
      /** @type {string} */
      div.className = "waves-ripple waves-rippling";
      elm.appendChild(div);
      var pos = getOffset(elm);
      /** @type {number} */
      var t = 0;
      /** @type {number} */
      var x = 0;
      if ("touches" in e && e.touches.length) {
        /** @type {number} */
        t = e.touches[0].pageY - pos.top;
        /** @type {number} */
        x = e.touches[0].pageX - pos.left;
      } else {
        /** @type {number} */
        t = e.pageY - pos.top;
        /** @type {number} */
        x = e.pageX - pos.left;
      }
      /** @type {number} */
      x = x >= 0 ? x : 0;
      /** @type {number} */
      t = t >= 0 ? t : 0;
      /** @type {string} */
      var vend_prop = "scale(" + elm.clientWidth / 100 * 3 + ")";
      /** @type {string} */
      var prevValue = "translate(0,0)";
      if (vars) {
        /** @type {string} */
        prevValue = "translate(" + vars.x + "px, " + vars.y + "px)";
      }
      div.setAttribute("data-hold", Date.now());
      div.setAttribute("data-x", x);
      div.setAttribute("data-y", t);
      div.setAttribute("data-scale", vend_prop);
      div.setAttribute("data-translate", prevValue);
      var styles = {
        top : t + "px",
        left : x + "px"
      };
      div.classList.add("waves-notransition");
      div.setAttribute("style", $(styles));
      div.classList.remove("waves-notransition");
      /** @type {string} */
      styles["-webkit-transform"] = vend_prop + " " + prevValue;
      /** @type {string} */
      styles["-moz-transform"] = vend_prop + " " + prevValue;
      /** @type {string} */
      styles["-ms-transform"] = vend_prop + " " + prevValue;
      /** @type {string} */
      styles["-o-transform"] = vend_prop + " " + prevValue;
      /** @type {string} */
      styles.transform = vend_prop + " " + prevValue;
      /** @type {string} */
      styles.opacity = "1";
      /** @type {number} */
      var val = "mousemove" === e.type ? 2500 : options.duration;
      /** @type {string} */
      styles["-webkit-transition-duration"] = val + "ms";
      /** @type {string} */
      styles["-moz-transition-duration"] = val + "ms";
      /** @type {string} */
      styles["-o-transition-duration"] = val + "ms";
      /** @type {string} */
      styles["transition-duration"] = val + "ms";
      div.setAttribute("style", $(styles));
    },
    /**
     * @param {Object} e
     * @param {Object} elm
     * @return {undefined}
     */
    hide : function(e, elm) {
      elm = elm || this;
      var employees = elm.getElementsByClassName("waves-rippling");
      /** @type {number} */
      var i = 0;
      var l = employees.length;
      for (;l > i;i++) {
        start(e, elm, employees[i]);
      }
    }
  };
  var functions = {
    /**
     * @param {Object} input
     * @return {undefined}
     */
    input : function(input) {
      var parent = input.parentNode;
      if ("i" !== parent.tagName.toLowerCase() || !parent.classList.contains("waves-effect")) {
        /** @type {Element} */
        var element = document.createElement("i");
        /** @type {string} */
        element.className = input.className + " waves-input-wrapper";
        /** @type {string} */
        input.className = "waves-button-input";
        parent.replaceChild(element, input);
        element.appendChild(input);
        /** @type {(CSSStyleDeclaration|null)} */
        var params = window.getComputedStyle(input, null);
        /** @type {string} */
        var el = params.color;
        /** @type {string} */
        var color = params.backgroundColor;
        element.setAttribute("style", "color:" + el + ";background:" + color);
        input.setAttribute("style", "background-color:rgba(0,0,0,0);");
      }
    },
    /**
     * @param {Node} a
     * @return {undefined}
     */
    img : function(a) {
      var el = a.parentNode;
      if ("i" !== el.tagName.toLowerCase() || !el.classList.contains("waves-effect")) {
        /** @type {Element} */
        var s = document.createElement("i");
        el.replaceChild(s, a);
        s.appendChild(a);
      }
    }
  };
  var that = {
    touches : 0,
    /**
     * @param {Object} v
     * @return {?}
     */
    allowEvent : function(v) {
      /** @type {boolean} */
      var touch = true;
      return/^(mousedown|mousemove)$/.test(v.type) && (that.touches && (touch = false)), touch;
    },
    /**
     * @param {Object} event
     * @return {undefined}
     */
    registerEvent : function(event) {
      var eventType = event.type;
      if ("touchstart" === eventType) {
        that.touches += 1;
      } else {
        if (/^(touchend|touchcancel)$/.test(eventType)) {
          setTimeout(function() {
            if (that.touches) {
              that.touches -= 1;
            }
          }, 500);
        }
      }
    }
  };
  return f.init = function(params) {
    /** @type {(HTMLElement|null)} */
    var element = document.body;
    params = params || {};
    if ("duration" in params) {
      options.duration = params.duration;
    }
    if ("delay" in params) {
      options.delay = params.delay;
    }
    if (hasTouch) {
      element.addEventListener("touchstart", init, false);
      element.addEventListener("touchcancel", that.registerEvent, false);
      element.addEventListener("touchend", that.registerEvent, false);
    }
    element.addEventListener("mousedown", init, false);
  }, f.attach = function(elems, cls) {
    elems = each(elems);
    if ("[object Array]" === _toString.call(cls)) {
      cls = cls.join(" ");
    }
    /** @type {string} */
    cls = cls ? " " + cls : "";
    var elem;
    var i;
    /** @type {number} */
    var key = 0;
    var el = elems.length;
    for (;el > key;key++) {
      elem = elems[key];
      i = elem.tagName.toLowerCase();
      if (-1 !== ["input", "img"].indexOf(i)) {
        functions[i](elem);
        elem = elem.parentElement;
      }
      if (-1 === elem.className.indexOf("waves-effect")) {
        elem.className += " waves-effect" + cls;
      }
    }
  }, f.ripple = function(elems, params) {
    elems = each(elems);
    var l = elems.length;
    if (params = params || {}, params.wait = params.wait || 0, params.position = params.position || null, l) {
      var el;
      var scrollCoord;
      var box;
      var ev = {};
      /** @type {number} */
      var i = 0;
      var data = {
        type : "mousedown",
        button : 1
      };
      /**
       * @param {Object} event
       * @param {Object} e
       * @return {?}
       */
      var fn = function(event, e) {
        return function() {
          options.hide(event, e);
        };
      };
      for (;l > i;i++) {
        if (el = elems[i], scrollCoord = params.position || {
          x : el.clientWidth / 2,
          y : el.clientHeight / 2
        }, box = getOffset(el), ev.x = box.left + scrollCoord.x, ev.y = box.top + scrollCoord.y, data.pageX = ev.x, data.pageY = ev.y, options.show(data, el), params.wait >= 0 && null !== params.wait) {
          var instance = {
            type : "mouseup",
            button : 1
          };
          setTimeout(fn(instance, el), params.wait);
        }
      }
    }
  }, f.calm = function(row) {
    row = each(row);
    var datum = {
      type : "mouseup",
      button : 1
    };
    /** @type {number} */
    var name = 0;
    var clen = row.length;
    for (;clen > name;name++) {
      options.hide(datum, row[name]);
    }
  }, f.displayEffect = function(option) {
    console.error("Waves.displayEffect() has been deprecated and will be removed in future version. Please use Waves.init() to initialize Waves effect");
    f.init(option);
  }, f;
}), function(factory) {
  if ("function" == typeof define && define.amd) {
    define(["jquery"], factory);
  } else {
    if ("object" == typeof module && module.exports) {
      /**
       * @param {?} PromiseArray
       * @param {number} $
       * @return {?}
       */
      module.exports = function(PromiseArray, $) {
        return void 0 === $ && ($ = "undefined" != typeof window ? require("jquery") : require("jquery")(PromiseArray)), factory($), $;
      };
    } else {
      factory(jQuery);
    }
  }
}(function($) {
  var element = $(document);
  var $window = $(window);
  /** @type {string} */
  var pluginName = "selectric";
  /** @type {string} */
  var uHostName = "Input Items Open Disabled TempShow HideSelect Wrapper Hover Responsive Above Scroll Group GroupLabel";
  /** @type {string} */
  var namespace = ".sl";
  /** @type {Array} */
  var vowels = ["a", "e", "i", "o", "u", "n", "c", "y"];
  /** @type {Array} */
  var tokenized = [/[\xE0-\xE5]/g, /[\xE8-\xEB]/g, /[\xEC-\xEF]/g, /[\xF2-\xF6]/g, /[\xF9-\xFC]/g, /[\xF1]/g, /[\xE7]/g, /[\xFD-\xFF]/g];
  /**
   * @param {Object} element
   * @param {string} option
   * @return {undefined}
   */
  var Plugin = function(element, option) {
    var self = this;
    /** @type {Object} */
    self.element = element;
    self.$element = $(element);
    self.state = {
      enabled : false,
      opened : false,
      currValue : -1,
      selectedIdx : -1
    };
    self.eventTriggers = {
      open : self.open,
      close : self.close,
      destroy : self.destroy,
      refresh : self.refresh,
      init : self.init
    };
    self.init(option);
  };
  Plugin.prototype = {
    utils : {
      /**
       * @return {?}
       */
      isMobile : function() {
        return/android|ip(hone|od|ad)/i.test(navigator.userAgent);
      },
      /**
       * @param {Object} str
       * @return {?}
       */
      replaceDiacritics : function(str) {
        /** @type {number} */
        var index = tokenized.length;
        for (;index--;) {
          str = str.toLowerCase().replace(tokenized[index], vowels[index]);
        }
        return str;
      },
      /**
       * @param {string} string
       * @return {?}
       */
      format : function(string) {
        /** @type {Arguments} */
        var funcs = arguments;
        return("" + string).replace(/\{(?:(\d+)|(\w+))\}/g, function(dataAndEvents, type, contextId) {
          return contextId && funcs[1] ? funcs[1][contextId] : funcs[type];
        });
      },
      /**
       * @param {(Array|number)} formElements
       * @param {number} next
       * @return {?}
       */
      nextEnabledItem : function(formElements, next) {
        for (;formElements[next = (next + 1) % formElements.length].disabled;) {
        }
        return next;
      },
      /**
       * @param {(Array|number)} formElements
       * @param {number} previous
       * @return {?}
       */
      previousEnabledItem : function(formElements, previous) {
        for (;formElements[previous = (previous > 0 ? previous : formElements.length) - 1].disabled;) {
        }
        return previous;
      },
      /**
       * @param {string} str
       * @return {?}
       */
      toDash : function(str) {
        return str.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
      },
      /**
       * @param {string} name
       * @param {?} state
       * @return {undefined}
       */
      triggerCallback : function(name, state) {
        var el = state.element;
        var fn = state.options["on" + name];
        if ($.isFunction(fn)) {
          fn.call(el, el, state);
        }
        if ($.fn[pluginName].hooks[name]) {
          $.each($.fn[pluginName].hooks[name], function() {
            this.call(el, el, state);
          });
        }
        $(el).trigger(pluginName + "-" + this.toDash(name), state);
      }
    },
    /**
     * @param {string} options
     * @return {?}
     */
    init : function(options) {
      var self = this;
      if (self.options = $.extend(true, {}, $.fn[pluginName].defaults, self.options, options), self.utils.triggerCallback("BeforeInit", self), self.destroy(true), self.options.disableOnMobile && self.utils.isMobile()) {
        return void(self.disableOnMobile = true);
      }
      self.classes = self.getClassNames();
      var b = $("<input/>", {
        "class" : self.classes.input,
        readonly : self.utils.isMobile()
      });
      var rows = $("<div/>", {
        "class" : self.classes.items,
        tabindex : -1
      });
      var emptyJ = $("<div/>", {
        "class" : self.classes.scroll
      });
      var wrapper = $("<div/>", {
        "class" : self.classes.prefix,
        html : self.options.arrowButtonMarkup
      });
      var title = $("<p/>", {
        "class" : "label"
      });
      var max = self.$element.wrap("<div/>").parent().append(wrapper.prepend(title), rows, b);
      self.elements = {
        input : b,
        items : rows,
        itemsScroll : emptyJ,
        wrapper : wrapper,
        label : title,
        outerWrapper : max
      };
      self.$element.on(self.eventTriggers).wrap('<div class="' + self.classes.hideselect + '"/>');
      self.originalTabindex = self.$element.prop("tabindex");
      self.$element.prop("tabindex", false);
      self.populate();
      self.activate();
      self.utils.triggerCallback("Init", self);
    },
    /**
     * @return {undefined}
     */
    activate : function() {
      var self = this;
      var w = self.$element.width();
      self.utils.triggerCallback("BeforeActivate", self);
      self.elements.outerWrapper.prop("class", [self.classes.wrapper, self.$element.prop("class").replace(/\S+/g, self.classes.prefix + "-$&"), self.options.responsive ? self.classes.responsive : ""].join(" "));
      if (self.options.inheritOriginalWidth) {
        if (w > 0) {
          self.elements.outerWrapper.width(w);
        }
      }
      if (self.$element.prop("disabled")) {
        self.elements.outerWrapper.addClass(self.classes.disabled);
        self.elements.input.prop("disabled", true);
      } else {
        /** @type {boolean} */
        self.state.enabled = true;
        self.elements.outerWrapper.removeClass(self.classes.disabled);
        self.$li = self.elements.items.removeAttr("style").find("li");
        self.bindEvents();
      }
      self.utils.triggerCallback("Activate", self);
    },
    /**
     * @return {?}
     */
    getClassNames : function() {
      var mocha = this;
      var config = mocha.options.customClass;
      var remote = {};
      return $.each(uHostName.split(" "), function(dataAndEvents, name) {
        var s = config.prefix + name;
        remote[name.toLowerCase()] = config.camelCase ? s : mocha.utils.toDash(s);
      }), remote.prefix = config.prefix, remote;
    },
    /**
     * @return {undefined}
     */
    setLabel : function() {
      var self = this;
      var message = self.options.labelBuilder;
      var value = self.lookupItems[self.state.currValue];
      self.elements.label.html($.isFunction(message) ? message(value) : self.utils.format(message, value));
    },
    /**
     * @return {undefined}
     */
    populate : function() {
      var that = this;
      var others = that.$element.children();
      var options = that.$element.find("option");
      var selected = options.index(options.filter(":selected"));
      /** @type {number} */
      var idx = 0;
      that.state.currValue = that.state.selected = ~selected ? selected : 0;
      that.state.selectedIdx = that.state.currValue;
      /** @type {Array} */
      that.items = [];
      /** @type {Array} */
      that.lookupItems = [];
      if (others.length) {
        others.each(function(i) {
          var $el = $(this);
          if ($el.is("optgroup")) {
            var o = {
              element : $el,
              label : $el.prop("label"),
              groupDisabled : $el.prop("disabled"),
              items : []
            };
            $el.children().each(function(i) {
              var el = $(this);
              var ch = el.html();
              o.items[i] = {
                index : idx,
                element : el,
                value : el.val(),
                text : ch,
                slug : that.utils.replaceDiacritics(ch),
                disabled : o.groupDisabled
              };
              that.lookupItems[idx] = o.items[i];
              idx++;
            });
            that.items[i] = o;
          } else {
            var ch = $el.html();
            that.items[i] = {
              index : idx,
              element : $el,
              value : $el.val(),
              text : ch,
              slug : that.utils.replaceDiacritics(ch),
              disabled : $el.prop("disabled")
            };
            that.lookupItems[idx] = that.items[i];
            idx++;
          }
        });
        that.setLabel();
        that.elements.items.append(that.elements.itemsScroll.html(that.getItemsMarkup(that.items)));
      }
    },
    /**
     * @param {Array} contexts
     * @return {?}
     */
    getItemsMarkup : function(contexts) {
      var that = this;
      /** @type {string} */
      var written = "<ul>";
      return $.each(contexts, function(dataAndEvents, data) {
        if (void 0 !== data.label) {
          written += that.utils.format('<ul class="{1}"><li class="{2}">{3}</li>', $.trim([that.classes.group, data.groupDisabled ? "disabled" : "", data.element.prop("class")].join(" ")), that.classes.grouplabel, data.element.prop("label"));
          $.each(data.items, function(dataAndEvents, data) {
            written += that.getItemMarkup(data.index, data);
          });
          written += "</ul>";
        } else {
          written += that.getItemMarkup(data.index, data);
        }
      }), written + "</ul>";
    },
    /**
     * @param {?} i
     * @param {Object} item
     * @return {?}
     */
    getItemMarkup : function(i, item) {
      var config = this;
      var fn = config.options.optionsItemBuilder;
      return config.utils.format('<li data-index="{1}" class="{2}">{3}</li>', i, $.trim([i === config.state.currValue ? "selected" : "", i === config.items.length - 1 ? "last" : "", item.disabled ? "disabled" : ""].join(" ")), $.isFunction(fn) ? fn(item, item.element, i) : config.utils.format(fn, item));
    },
    /**
     * @return {undefined}
     */
    bindEvents : function() {
      var self = this;
      self.elements.wrapper.add(self.$element).add(self.elements.outerWrapper).add(self.elements.input).off(namespace);
      self.elements.outerWrapper.on("mouseenter" + namespace + " mouseleave" + namespace, function(e) {
        $(this).toggleClass(self.classes.hover, "mouseenter" === e.type);
        if (self.options.openOnHover) {
          clearTimeout(self.closeTimer);
          if ("mouseleave" === e.type) {
            /** @type {number} */
            self.closeTimer = setTimeout($.proxy(self.close, self), self.options.hoverIntentTimeout);
          } else {
            self.open();
          }
        }
      });
      self.elements.wrapper.on("click" + namespace, function(m) {
        if (self.state.opened) {
          self.close();
        } else {
          self.open(m);
        }
      });
      self.elements.input.prop({
        tabindex : self.originalTabindex,
        disabled : false
      }).on("keypress" + namespace, self.handleSystemKeys).on("keydown" + namespace, function(event) {
        self.handleSystemKeys(event);
        clearTimeout(self.resetStr);
        /** @type {number} */
        self.resetStr = setTimeout(function() {
          self.elements.input.val("");
        }, self.options.keySearchTimeout);
        var max = event.keyCode || event.which;
        if (max > 36 && 41 > max) {
          if (!self.options.allowWrap && (39 > max && 0 === self.state.selectedIdx || max > 38 && self.state.selectedIdx + 1 === self.items.length)) {
            return;
          }
          self.select(self.utils[(39 > max ? "previous" : "next") + "EnabledItem"](self.items, self.state.selectedIdx));
        }
      }).on("focusin" + namespace, function(m) {
        if (!self.state.opened) {
          self.open(m);
        }
      }).on("oninput" in self.elements.input[0] ? "input" : "keyup", function() {
        if (self.elements.input.val().length) {
          $.each(self.items, function(idx, elm) {
            return RegExp("^" + self.elements.input.val(), "i").test(elm.slug) && !elm.disabled ? (self.select(idx), false) : void 0;
          });
        }
      });
      self.$li.on({
        /**
         * @param {?} event
         * @return {undefined}
         */
        mousedown : function(event) {
          event.preventDefault();
          event.stopPropagation();
        },
        /**
         * @return {?}
         */
        click : function() {
          return self.select($(this).data("index"), true), false;
        }
      });
    },
    /**
     * @param {Event} event
     * @return {undefined}
     */
    handleSystemKeys : function(event) {
      var chart = this;
      var nType = event.keyCode || event.which;
      if (13 == nType) {
        event.preventDefault();
      }
      if (/^(9|13|27)$/.test(nType)) {
        event.stopPropagation();
        chart.select(chart.state.selectedIdx, true);
      }
    },
    /**
     * @return {undefined}
     */
    refresh : function() {
      var self = this;
      self.populate();
      self.activate();
      self.utils.triggerCallback("Refresh", self);
    },
    /**
     * @return {undefined}
     */
    setOptionsDimensions : function() {
      var that = this;
      var listEntries = that.elements.items.closest(":visible").children(":hidden").addClass(that.classes.tempshow);
      var maxHeight = that.options.maxHeight;
      var b = that.elements.items.outerWidth();
      /** @type {number} */
      var a = that.elements.wrapper.outerWidth() - (b - that.elements.items.width());
      if (!that.options.expandToItemText || a > b) {
        /** @type {number} */
        that.finalWidth = a;
      } else {
        that.elements.items.css("overflow", "scroll");
        that.elements.outerWrapper.width(9E4);
        that.finalWidth = that.elements.items.width();
        that.elements.items.css("overflow", "");
        that.elements.outerWrapper.width("");
      }
      if (that.elements.items.width(that.finalWidth).height() > maxHeight) {
        that.elements.items.height(maxHeight);
      }
      listEntries.removeClass(that.classes.tempshow);
    },
    /**
     * @return {undefined}
     */
    isInViewport : function() {
      var node = this;
      var inner = $window.scrollTop();
      var arr = $window.height();
      var base = node.elements.outerWrapper.offset().top;
      var post = node.elements.outerWrapper.outerHeight();
      /** @type {boolean} */
      var u = base + post + node.itemsHeight <= inner + arr;
      /** @type {boolean} */
      var a = base - node.itemsHeight > inner;
      /** @type {boolean} */
      var is_to_selected = !u && a;
      node.elements.outerWrapper.toggleClass(node.classes.above, is_to_selected);
    },
    /**
     * @param {?} index
     * @return {undefined}
     */
    detectItemVisibility : function(index) {
      var self = this;
      var buffer = self.$li.eq(index).outerHeight();
      var h = self.$li[index].offsetTop;
      var newValue = self.elements.itemsScroll.scrollTop();
      var offset = h + 2 * buffer;
      self.elements.itemsScroll.scrollTop(offset > newValue + self.itemsHeight ? offset - self.itemsHeight : newValue > h - buffer ? h - buffer : newValue);
    },
    /**
     * @param {Event} event
     * @return {undefined}
     */
    open : function(event) {
      var self = this;
      self.utils.triggerCallback("BeforeOpen", self);
      if (event) {
        event.preventDefault();
        event.stopPropagation();
      }
      if (self.state.enabled) {
        self.setOptionsDimensions();
        $("." + self.classes.hideselect, "." + self.classes.open).children()[pluginName]("close");
        /** @type {boolean} */
        self.state.opened = true;
        self.itemsHeight = self.elements.items.outerHeight();
        self.itemsInnerHeight = self.elements.items.height();
        self.elements.outerWrapper.addClass(self.classes.open);
        self.elements.input.val("");
        if (event) {
          if ("focusin" !== event.type) {
            self.elements.input.focus();
          }
        }
        element.on("click" + namespace, $.proxy(self.close, self)).on("scroll" + namespace, $.proxy(self.isInViewport, self));
        self.isInViewport();
        if (self.options.preventWindowScroll) {
          element.on("mousewheel" + namespace + " DOMMouseScroll" + namespace, "." + self.classes.scroll, function(event) {
            var orgEvent = event.originalEvent;
            var o = $(this).scrollTop();
            /** @type {number} */
            var deltaY = 0;
            if ("detail" in orgEvent) {
              /** @type {number} */
              deltaY = -1 * orgEvent.detail;
            }
            if ("wheelDelta" in orgEvent) {
              deltaY = orgEvent.wheelDelta;
            }
            if ("wheelDeltaY" in orgEvent) {
              deltaY = orgEvent.wheelDeltaY;
            }
            if ("deltaY" in orgEvent) {
              /** @type {number} */
              deltaY = -1 * orgEvent.deltaY;
            }
            if (o === this.scrollHeight - self.itemsInnerHeight && 0 > deltaY || 0 === o && deltaY > 0) {
              event.preventDefault();
            }
          });
        }
        self.detectItemVisibility(self.state.selectedIdx);
        self.utils.triggerCallback("Open", self);
      }
    },
    /**
     * @return {undefined}
     */
    close : function() {
      var self = this;
      self.utils.triggerCallback("BeforeClose", self);
      self.change();
      element.off(namespace);
      self.elements.outerWrapper.removeClass(self.classes.open);
      /** @type {boolean} */
      self.state.opened = false;
      self.utils.triggerCallback("Close", self);
    },
    /**
     * @return {undefined}
     */
    change : function() {
      var self = this;
      self.utils.triggerCallback("BeforeChange", self);
      if (self.state.currValue !== self.state.selectedIdx) {
        self.$element.prop("selectedIndex", self.state.currValue = self.state.selectedIdx).data("value", self.lookupItems[self.state.selectedIdx].text);
        self.setLabel();
      }
      self.utils.triggerCallback("Change", self);
    },
    /**
     * @param {?} idx
     * @param {boolean} dataAndEvents
     * @return {undefined}
     */
    select : function(idx, dataAndEvents) {
      var self = this;
      if (void 0 !== idx) {
        if (!self.lookupItems[idx].disabled) {
          self.$li.filter("[data-index]").removeClass("selected").eq(self.state.selectedIdx = idx).addClass("selected");
          self.detectItemVisibility(idx);
          if (dataAndEvents) {
            self.close();
          }
        }
      }
    },
    /**
     * @param {boolean} dataAndEvents
     * @return {undefined}
     */
    destroy : function(dataAndEvents) {
      var self = this;
      if (self.state) {
        if (self.state.enabled) {
          self.elements.items.add(self.elements.wrapper).add(self.elements.input).remove();
          if (!dataAndEvents) {
            self.$element.removeData(pluginName).removeData("value");
          }
          self.$element.prop("tabindex", self.originalTabindex).off(namespace).off(self.eventTriggers).unwrap().unwrap();
          /** @type {boolean} */
          self.state.enabled = false;
        }
      }
    }
  };
  /**
   * @param {string} opts
   * @return {?}
   */
  $.fn[pluginName] = function(opts) {
    return this.each(function() {
      var o = $.data(this, pluginName);
      if (o && !o.disableOnMobile) {
        if ("string" == typeof opts && o[opts]) {
          o[opts]();
        } else {
          o.init(opts);
        }
      } else {
        $.data(this, pluginName, new Plugin(this, opts));
      }
    });
  };
  $.fn[pluginName].hooks = {
    /**
     * @param {?} num
     * @param {?} key
     * @param {?} models
     * @return {undefined}
     */
    add : function(num, key, models) {
      if (!this[num]) {
        this[num] = {};
      }
      this[num][key] = models;
    },
    /**
     * @param {string} selector
     * @param {?} testname
     * @return {undefined}
     */
    remove : function(selector, testname) {
      delete this[selector][testname];
    }
  };
  $.fn[pluginName].defaults = {
    /**
     * @param {?} input
     * @return {undefined}
     */
    onChange : function(input) {
      $(input).change();
    },
    maxHeight : 300,
    keySearchTimeout : 500,
    arrowButtonMarkup : '<b class="button">&#x25be;</b>',
    disableOnMobile : true,
    openOnHover : false,
    hoverIntentTimeout : 500,
    expandToItemText : false,
    responsive : false,
    preventWindowScroll : true,
    inheritOriginalWidth : false,
    allowWrap : true,
    customClass : {
      prefix : pluginName,
      camelCase : false
    },
    optionsItemBuilder : "{text}",
    labelBuilder : "{text}"
  };
}), !function(root, factory) {
  if ("function" == typeof define && define.amd) {
    define(["jquery"], factory);
  } else {
    factory(root.jQuery);
  }
}(this, function($) {
  /**
   * @param {boolean} dataAndEvents
   * @return {?}
   */
  function init(dataAndEvents) {
    if (item.webkit && !dataAndEvents) {
      return{
        height : 0,
        width : 0
      };
    }
    if (!item.data.outer) {
      var defaults = {
        border : "none",
        "box-sizing" : "content-box",
        height : "200px",
        margin : "0",
        padding : "0",
        width : "200px"
      };
      item.data.inner = $("<div>").css($.extend({}, defaults));
      item.data.outer = $("<div>").css($.extend({
        left : "-1000px",
        overflow : "scroll",
        position : "absolute",
        top : "-1000px"
      }, defaults)).append(item.data.inner).appendTo("body");
    }
    return item.data.outer.scrollLeft(1E3).scrollTop(1E3), {
      height : Math.ceil(item.data.outer.offset().top - item.data.inner.offset().top || 0),
      width : Math.ceil(item.data.outer.offset().left - item.data.inner.offset().left || 0)
    };
  }
  /**
   * @return {?}
   */
  function reset() {
    var img = init(true);
    return!(img.height || img.width);
  }
  /**
   * @param {KeyboardEvent} event
   * @return {?}
   */
  function handler(event) {
    var orgEvent = event.originalEvent;
    return orgEvent.axis && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ? false : !orgEvent.wheelDeltaX;
  }
  /** @type {boolean} */
  var contained = false;
  var item = {
    data : {
      index : 0,
      name : "scrollbar"
    },
    macosx : /mac/i.test(navigator.platform),
    mobile : /android|webos|iphone|ipad|ipod|blackberry/i.test(navigator.userAgent),
    overlay : null,
    scroll : null,
    scrolls : [],
    webkit : /webkit/i.test(navigator.userAgent) && !/edge\/\d+/i.test(navigator.userAgent)
  };
  /**
   * @param {string} key
   * @return {undefined}
   */
  item.scrolls.add = function(key) {
    this.remove(key).push(key);
  };
  /**
   * @param {string} item
   * @return {?}
   */
  item.scrolls.remove = function(item) {
    for (;$.inArray(item, this) >= 0;) {
      this.splice($.inArray(item, this), 1);
    }
    return this;
  };
  var config = {
    autoScrollSize : true,
    autoUpdate : true,
    debug : false,
    disableBodyScroll : false,
    duration : 200,
    ignoreMobile : false,
    ignoreOverlay : false,
    scrollStep : 30,
    showArrows : false,
    stepScrolling : true,
    scrollx : null,
    scrolly : null,
    onDestroy : null,
    onInit : null,
    onScroll : null,
    onUpdate : null
  };
  /**
   * @param {Object} container
   * @return {undefined}
   */
  var update = function(container) {
    if (!item.scroll) {
      item.overlay = reset();
      item.scroll = init();
      after();
      $(window).resize(function() {
        /** @type {boolean} */
        var then2 = false;
        if (item.scroll && (item.scroll.height || item.scroll.width)) {
          var size = init();
          if (size.height !== item.scroll.height || size.width !== item.scroll.width) {
            item.scroll = size;
            /** @type {boolean} */
            then2 = true;
          }
        }
        after(then2);
      });
    }
    /** @type {Object} */
    this.container = container;
    /** @type {string} */
    this.namespace = ".scrollbar_" + item.data.index++;
    this.options = $.extend({}, config, window.jQueryScrollbarOptions || {});
    /** @type {null} */
    this.scrollTo = null;
    this.scrollx = {};
    this.scrolly = {};
    container.data(item.data.name, this);
    item.scrolls.add(this);
  };
  update.prototype = {
    /**
     * @return {undefined}
     */
    destroy : function() {
      if (this.wrapper) {
        this.container.removeData(item.data.name);
        item.scrolls.remove(this);
        var win = this.container.scrollLeft();
        var environment = this.container.scrollTop();
        this.container.insertBefore(this.wrapper).css({
          height : "",
          margin : "",
          "max-height" : ""
        }).removeClass("scroll-content scroll-scrollx_visible scroll-scrolly_visible").off(this.namespace).scrollLeft(win).scrollTop(environment);
        this.scrollx.scroll.removeClass("scroll-scrollx_visible").find("div").andSelf().off(this.namespace);
        this.scrolly.scroll.removeClass("scroll-scrolly_visible").find("div").andSelf().off(this.namespace);
        this.wrapper.remove();
        $(document).add("body").off(this.namespace);
        if ($.isFunction(this.options.onDestroy)) {
          this.options.onDestroy.apply(this, [this.container]);
        }
      }
    },
    /**
     * @param {Object} params
     * @return {?}
     */
    init : function(params) {
      var that = this;
      var container = this.container;
      var element = this.containerWrapper || container;
      var NS = this.namespace;
      var options = $.extend(this.options, params || {});
      var self = {
        x : this.scrollx,
        y : this.scrolly
      };
      var wrapper = this.wrapper;
      var settings = {
        scrollLeft : container.scrollLeft(),
        scrollTop : container.scrollTop()
      };
      if (item.mobile && options.ignoreMobile || (item.overlay && options.ignoreOverlay || item.macosx && !item.webkit)) {
        return false;
      }
      if (wrapper) {
        element.css({
          height : "auto",
          "margin-bottom" : -1 * item.scroll.height + "px",
          "margin-right" : -1 * item.scroll.width + "px",
          "max-height" : ""
        });
      } else {
        if (this.wrapper = wrapper = $("<div>").addClass("scroll-wrapper").addClass(container.attr("class")).css("position", "absolute" == container.css("position") ? "absolute" : "relative").insertBefore(container).append(container), container.is("textarea") && (this.containerWrapper = element = $("<div>").insertBefore(container).append(container), wrapper.addClass("scroll-textarea")), element.addClass("scroll-content").css({
          height : "auto",
          "margin-bottom" : -1 * item.scroll.height + "px",
          "margin-right" : -1 * item.scroll.width + "px",
          "max-height" : ""
        }), container.on("scroll" + NS, function(dataAndEvents) {
          if ($.isFunction(options.onScroll)) {
            options.onScroll.call(that, {
              maxScroll : self.y.maxScrollOffset,
              scroll : container.scrollTop(),
              size : self.y.size,
              visible : self.y.visible
            }, {
              maxScroll : self.x.maxScrollOffset,
              scroll : container.scrollLeft(),
              size : self.x.size,
              visible : self.x.visible
            });
          }
          if (self.x.isVisible) {
            self.x.scroll.bar.css("left", container.scrollLeft() * self.x.kx + "px");
          }
          if (self.y.isVisible) {
            self.y.scroll.bar.css("top", container.scrollTop() * self.y.kx + "px");
          }
        }), wrapper.on("scroll" + NS, function() {
          wrapper.scrollTop(0).scrollLeft(0);
        }), options.disableBodyScroll) {
          /**
           * @param {KeyboardEvent} e
           * @return {undefined}
           */
          var update = function(e) {
            if (handler(e)) {
              if (self.y.isVisible) {
                self.y.mousewheel(e);
              }
            } else {
              if (self.x.isVisible) {
                self.x.mousewheel(e);
              }
            }
          };
          wrapper.on("MozMousePixelScroll" + NS, update);
          wrapper.on("mousewheel" + NS, update);
          if (item.mobile) {
            wrapper.on("touchstart" + NS, function(event) {
              var ev = event.originalEvent.touches && event.originalEvent.touches[0] || event;
              var touch = {
                pageX : ev.pageX,
                pageY : ev.pageY
              };
              var drag = {
                left : container.scrollLeft(),
                top : container.scrollTop()
              };
              $(document).on("touchmove" + NS, function(event) {
                var ev = event.originalEvent.targetTouches && event.originalEvent.targetTouches[0] || event;
                container.scrollLeft(drag.left + touch.pageX - ev.pageX);
                container.scrollTop(drag.top + touch.pageY - ev.pageY);
                event.preventDefault();
              });
              $(document).on("touchend" + NS, function() {
                $(document).off(NS);
              });
            });
          }
        }
        if ($.isFunction(options.onInit)) {
          options.onInit.apply(this, [container]);
        }
      }
      $.each(self, function(y, item) {
        /** @type {null} */
        var close = null;
        /** @type {number} */
        var number = 1;
        /** @type {string} */
        var prop = "x" === y ? "scrollLeft" : "scrollTop";
        var filename = options.scrollStep;
        /**
         * @return {undefined}
         */
        var done = function() {
          var Diveboard = container[prop]();
          container[prop](Diveboard + filename);
          if (1 == number) {
            if (Diveboard + filename >= value) {
              Diveboard = container[prop]();
            }
          }
          if (-1 == number) {
            if (value >= Diveboard + filename) {
              Diveboard = container[prop]();
            }
          }
          if (container[prop]() == Diveboard) {
            if (close) {
              close();
            }
          }
        };
        /** @type {number} */
        var value = 0;
        if (!item.scroll) {
          item.scroll = that._getScroll(options["scroll" + y]).addClass("scroll-" + y);
          if (options.showArrows) {
            item.scroll.addClass("scroll-element_arrows_visible");
          }
          /**
           * @param {KeyboardEvent} e
           * @return {?}
           */
          item.mousewheel = function(e) {
            if (!item.isVisible || "x" === y && handler(e)) {
              return true;
            }
            if ("y" === y && !handler(e)) {
              return self.x.mousewheel(e), true;
            }
            var character = -1 * e.originalEvent.wheelDelta || e.originalEvent.detail;
            /** @type {number} */
            var currentValue = item.size - item.visible - item.offset;
            return(character > 0 && currentValue > value || 0 > character && value > 0) && (value += character, 0 > value && (value = 0), value > currentValue && (value = currentValue), that.scrollTo = that.scrollTo || {}, that.scrollTo[prop] = value, setTimeout(function() {
              if (that.scrollTo) {
                container.stop().animate(that.scrollTo, 240, "linear", function() {
                  value = container[prop]();
                });
                /** @type {null} */
                that.scrollTo = null;
              }
            }, 1)), e.preventDefault(), false;
          };
          item.scroll.on("MozMousePixelScroll" + NS, item.mousewheel).on("mousewheel" + NS, item.mousewheel).on("mouseenter" + NS, function() {
            value = container[prop]();
          });
          item.scroll.find(".scroll-arrow, .scroll-element_track").on("mousedown" + NS, function(evt) {
            if (1 != evt.which) {
              return true;
            }
            /** @type {number} */
            number = 1;
            var settings = {
              eventOffset : evt["x" === y ? "pageX" : "pageY"],
              maxScrollValue : item.size - item.visible - item.offset,
              scrollbarOffset : item.scroll.bar.offset()["x" === y ? "left" : "top"],
              scrollbarSize : item.scroll.bar["x" === y ? "outerWidth" : "outerHeight"]()
            };
            /** @type {number} */
            var tref = 0;
            /** @type {number} */
            var scrollIntervalId = 0;
            return $(this).hasClass("scroll-arrow") ? (number = $(this).hasClass("scroll-arrow_more") ? 1 : -1, filename = options.scrollStep * number, value = number > 0 ? settings.maxScrollValue : 0) : (number = settings.eventOffset > settings.scrollbarOffset + settings.scrollbarSize ? 1 : settings.eventOffset < settings.scrollbarOffset ? -1 : 0, filename = Math.round(0.75 * item.visible) * number, value = settings.eventOffset - settings.scrollbarOffset - (options.stepScrolling ? 1 == number ? 
            settings.scrollbarSize : 0 : Math.round(settings.scrollbarSize / 2)), value = container[prop]() + value / item.kx), that.scrollTo = that.scrollTo || {}, that.scrollTo[prop] = options.stepScrolling ? container[prop]() + filename : value, options.stepScrolling && (close = function() {
              value = container[prop]();
              clearInterval(scrollIntervalId);
              clearTimeout(tref);
              /** @type {number} */
              tref = 0;
              /** @type {number} */
              scrollIntervalId = 0;
            }, tref = setTimeout(function() {
              /** @type {number} */
              scrollIntervalId = setInterval(done, 40);
            }, options.duration + 100)), setTimeout(function() {
              if (that.scrollTo) {
                container.animate(that.scrollTo, options.duration);
                /** @type {null} */
                that.scrollTo = null;
              }
            }, 1), that._handleMouseDown(close, evt);
          });
          item.scroll.bar.on("mousedown" + NS, function(evt) {
            if (1 != evt.which) {
              return true;
            }
            var ctrlKey = evt["x" === y ? "pageX" : "pageY"];
            var right = container[prop]();
            return item.scroll.addClass("scroll-draggable"), $(document).on("mousemove" + NS, function(dataAndEvents) {
              /** @type {number} */
              var left = parseInt((dataAndEvents["x" === y ? "pageX" : "pageY"] - ctrlKey) / item.kx, 10);
              container[prop](right + left);
            }), that._handleMouseDown(function() {
              item.scroll.removeClass("scroll-draggable");
              value = container[prop]();
            }, evt);
          });
        }
      });
      $.each(self, function(y, panel) {
        /** @type {string} */
        var activeClassName = "scroll-scroll" + y + "_visible";
        var $this = "x" == y ? self.y : self.x;
        panel.scroll.removeClass(activeClassName);
        $this.scroll.removeClass(activeClassName);
        element.removeClass(activeClassName);
      });
      $.each(self, function(c_name, owner) {
        $.extend(owner, "x" == c_name ? {
          offset : parseInt(container.css("left"), 10) || 0,
          size : container.prop("scrollWidth"),
          visible : wrapper.width()
        } : {
          offset : parseInt(container.css("top"), 10) || 0,
          size : container.prop("scrollHeight"),
          visible : wrapper.height()
        });
      });
      this._updateScroll("x", this.scrollx);
      this._updateScroll("y", this.scrolly);
      if ($.isFunction(options.onUpdate)) {
        options.onUpdate.apply(this, [container]);
      }
      $.each(self, function(w, data) {
        /** @type {string} */
        var key = "x" === w ? "left" : "top";
        /** @type {string} */
        var m = "x" === w ? "outerWidth" : "outerHeight";
        /** @type {string} */
        var widthOrHeight = "x" === w ? "width" : "height";
        /** @type {number} */
        var px = parseInt(container.css(key), 10) || 0;
        var end = data.size;
        var start = data.visible + px;
        var t = data.scroll.size[m]() + (parseInt(data.scroll.size.css(key), 10) || 0);
        if (options.autoScrollSize) {
          /** @type {number} */
          data.scrollbarSize = parseInt(t * start / end, 10);
          data.scroll.bar.css(widthOrHeight, data.scrollbarSize + "px");
        }
        data.scrollbarSize = data.scroll.bar[m]();
        /** @type {number} */
        data.kx = (t - data.scrollbarSize) / (end - start) || 1;
        /** @type {number} */
        data.maxScrollOffset = end - start;
      });
      container.scrollLeft(settings.scrollLeft).scrollTop(settings.scrollTop).trigger("scroll");
    },
    /**
     * @param {string} selector
     * @return {?}
     */
    _getScroll : function(selector) {
      var rules = {
        advanced : ['<div class="scroll-element">', '<div class="scroll-element_corner"></div>', '<div class="scroll-arrow scroll-arrow_less"></div>', '<div class="scroll-arrow scroll-arrow_more"></div>', '<div class="scroll-element_outer">', '<div class="scroll-element_size"></div>', '<div class="scroll-element_inner-wrapper">', '<div class="scroll-element_inner scroll-element_track">', '<div class="scroll-element_inner-bottom"></div>', "</div>", "</div>", '<div class="scroll-bar">', '<div class="scroll-bar_body">', 
        '<div class="scroll-bar_body-inner"></div>', "</div>", '<div class="scroll-bar_bottom"></div>', '<div class="scroll-bar_center"></div>', "</div>", "</div>", "</div>"].join(""),
        simple : ['<div class="scroll-element">', '<div class="scroll-element_outer">', '<div class="scroll-element_size"></div>', '<div class="scroll-element_track"></div>', '<div class="scroll-bar"></div>', "</div>", "</div>"].join("")
      };
      return rules[selector] && (selector = rules[selector]), selector || (selector = rules.simple), selector = "string" == typeof selector ? $(selector).appendTo(this.wrapper) : $(selector), $.extend(selector, {
        bar : selector.find(".scroll-bar"),
        size : selector.find(".scroll-element_size"),
        track : selector.find(".scroll-element_track")
      }), selector;
    },
    /**
     * @param {Function} callback
     * @param {Object} evt
     * @return {?}
     */
    _handleMouseDown : function(callback, evt) {
      var namespace = this.namespace;
      return $(document).on("blur" + namespace, function() {
        $(document).add("body").off(namespace);
        if (callback) {
          callback();
        }
      }), $(document).on("dragstart" + namespace, function(types) {
        return types.preventDefault(), false;
      }), $(document).on("mouseup" + namespace, function() {
        $(document).add("body").off(namespace);
        if (callback) {
          callback();
        }
      }), $("body").on("selectstart" + namespace, function(types) {
        return types.preventDefault(), false;
      }), evt && evt.preventDefault(), false;
    },
    /**
     * @param {string} y
     * @param {Object} data
     * @return {undefined}
     */
    _updateScroll : function(y, data) {
      var el = this.container;
      var element = this.containerWrapper || el;
      /** @type {string} */
      var activeClassName = "scroll-scroll" + y + "_visible";
      var that = "x" === y ? this.scrolly : this.scrollx;
      /** @type {number} */
      var px = parseInt(this.container.css("x" === y ? "left" : "top"), 10) || 0;
      var wrapper = this.wrapper;
      var right = data.size;
      var left = data.visible + px;
      /** @type {boolean} */
      data.isVisible = right - left > 1;
      if (data.isVisible) {
        data.scroll.addClass(activeClassName);
        that.scroll.addClass(activeClassName);
        element.addClass(activeClassName);
      } else {
        data.scroll.removeClass(activeClassName);
        that.scroll.removeClass(activeClassName);
        element.removeClass(activeClassName);
      }
      if ("y" === y) {
        if (el.is("textarea") || left > right) {
          element.css({
            height : left + item.scroll.height + "px",
            "max-height" : "none"
          });
        } else {
          element.css({
            "max-height" : left + item.scroll.height + "px"
          });
        }
      }
      if (data.size != el.prop("scrollWidth") || (that.size != el.prop("scrollHeight") || (data.visible != wrapper.width() || (that.visible != wrapper.height() || (data.offset != (parseInt(el.css("left"), 10) || 0) || that.offset != (parseInt(el.css("top"), 10) || 0)))))) {
        $.extend(this.scrollx, {
          offset : parseInt(el.css("left"), 10) || 0,
          size : el.prop("scrollWidth"),
          visible : wrapper.width()
        });
        $.extend(this.scrolly, {
          offset : parseInt(el.css("top"), 10) || 0,
          size : this.container.prop("scrollHeight"),
          visible : wrapper.height()
        });
        this._updateScroll("x" === y ? "y" : "x", that);
      }
    }
  };
  /** @type {function (Object): undefined} */
  var Reporter = update;
  /**
   * @param {string} method
   * @param {string} params
   * @return {?}
   */
  $.fn.scrollbar = function(method, params) {
    return "string" != typeof method && (params = method, method = "init"), "undefined" == typeof params && (params = []), $.isArray(params) || (params = [params]), this.not("body, .scroll-wrapper").each(function() {
      var lines = $(this);
      var reporter = lines.data(item.data.name);
      if (reporter || "init" === method) {
        if (!reporter) {
          reporter = new Reporter(lines);
        }
        if (reporter[method]) {
          reporter[method].apply(reporter, params);
        }
      }
    }), this;
  };
  $.fn.scrollbar.options = config;
  var after = function() {
    /** @type {number} */
    var tref = 0;
    /** @type {number} */
    var numRings = 0;
    return function(dataAndEvents) {
      var sitemi;
      var node;
      var options;
      var self;
      var label;
      var params;
      var c;
      /** @type {number} */
      sitemi = 0;
      for (;sitemi < item.scrolls.length;sitemi++) {
        self = item.scrolls[sitemi];
        node = self.container;
        options = self.options;
        label = self.wrapper;
        params = self.scrollx;
        c = self.scrolly;
        if (dataAndEvents || options.autoUpdate && (label && (label.is(":visible") && (node.prop("scrollWidth") != params.size || (node.prop("scrollHeight") != c.size || (label.width() != params.visible || label.height() != c.visible)))))) {
          self.init();
          if (options.debug) {
            if (window.console) {
              console.log({
                scrollHeight : node.prop("scrollHeight") + ":" + self.scrolly.size,
                scrollWidth : node.prop("scrollWidth") + ":" + self.scrollx.size,
                visibleHeight : label.height() + ":" + self.scrolly.visible,
                visibleWidth : label.width() + ":" + self.scrollx.visible
              }, true);
            }
            numRings++;
          }
        }
      }
      if (contained && numRings > 10) {
        if (window.console) {
          console.log("Scroll updates exceed 10");
        }
        /**
         * @return {undefined}
         */
        after = function() {
        };
      } else {
        clearTimeout(tref);
        /** @type {number} */
        tref = setTimeout(after, 300);
      }
    };
  }();
  if (window.angular) {
    !function(ng) {
      ng.module("jQueryScrollbar", []).provider("jQueryScrollbar", function() {
        var p = config;
        return{
          /**
           * @param {?} newOptions
           * @return {undefined}
           */
          setOptions : function(newOptions) {
            ng.extend(p, newOptions);
          },
          /**
           * @return {?}
           */
          $get : function() {
            return{
              options : ng.copy(p)
            };
          }
        };
      }).directive("jqueryScrollbar", ["jQueryScrollbar", "$parse", function(marked, $parse) {
        return{
          restrict : "AC",
          /**
           * @param {?} scope
           * @param {?} $scope
           * @param {?} attrs
           * @return {undefined}
           */
          link : function(scope, $scope, attrs) {
            var expr = $parse(attrs.jqueryScrollbar);
            var options = expr(scope);
            $scope.scrollbar(options || marked.options).on("$destroy", function() {
              $scope.scrollbar("destroy");
            });
          }
        };
      }]);
    }(window.angular);
  }
}), 



$(document).ready(function() {
  $(".filterBtn").click(function(types) {
    types.preventDefault();
    $("body").css({
      "overflow-y" : "hidden"
    });
    $(".filterList, .btns").animate({
      left : 0
    }, 100, function() {
    });
  });
  $(".filterList .prev").click(function(types) {
    types.preventDefault();
    $("body").css({
      "overflow-y" : "scroll"
    });
    $(".filterList, .btns").animate({
      left : "100%"
    }, 100, function() {
    });
  });
  $(".scrollbar-inner").scrollbar();
  $(".lavaMenu").lavaLamp({
    fx : "linear",
    speed : 200
  });
  $("select").selectric({
    disableOnMobile : false
  });
  /**
   * @return {undefined}
   */
  $.fn.equivalent = function() {
    var $this = $(this);
    var l = $this.css("height", "auto").eq(0).height();
    $this.each(function() {
      l = $(this).height() > l ? $(this).height() : l;
    });
    $this.height(l);
  };
  $(".newsItems .item").equivalent();
  $(".catalog .item").equivalent();
  $(document).ready(function(){
    $(".newsItems .item").equivalent();
    $(".catalog .item").equivalent();
  });
  $(window).load(function(){
    $(".newsItems .item").equivalent();
    $(".catalog .item").equivalent();
  });
  $(window).resize(function() {
    $(".newsItems .item").equivalent();
    $(".catalog .item").equivalent();
  });
  $(".carousel").carousel({
    interval : 5000
  });
  $(".carousel-caption").css("left", $("btnMenu").offset.left);
  if ($(".searchPage").length > 0) {
    $(".searchBox").addClass("static");
  }
  $(".search").click(function() {
    if (!$(".searchPage").length > 0) {
      var elm = $(".searchBox").not(".static");
      if (elm.hasClass("open")) {
        $("body").css("overflow", "auto");
        $(".overlay").fadeOut(100);
        elm.slideUp(100, function() {
          elm.removeClass("open");
        });
      } else {
        $("body").css("overflow", "hidden");
        $(".overlay").fadeIn(100);
        elm.slideDown(100, function() {
          elm.addClass("open");
        });
      }
    }
  });
  $(".btnMenu").click(function() {
    var $menu = $(".menuContainer");
    if ($menu.hasClass("open")) {
      $("body").css("overflow", "auto");
      $(".overlay").css("z-index", "").fadeOut(100);
      $menu.animate({
        width : "0"
      }, 100, function() {
        $menu.removeClass("open");
      });
    } else {
      $("body").css("overflow", "hidden");
      $(".overlay").css("z-index", "20").fadeIn(100);
      $menu.animate({
        width : "100%"
      }, 100, function() {
        $menu.addClass("open");
      });
    }
  });
  $('.totop').click(function(){
    $('body,html').animate({
      scrollTop: 0
    }, 600);
    return false;
  });
  $(document).click(function(ev) {
    var $main = $(".searchContainer");
    var obj = $(".searchBox").not(".static");
    if (obj.hasClass("open")) {
      if (!$(ev.target).closest($main).length) {
        $(".overlay").fadeOut(100);
        $("body").css("overflow", "auto");
        obj.slideUp(100, function() {
          obj.removeClass("open");
        });
      }
    }
    var elm = $(".menuContainer");
    if (elm.hasClass("open")) {
      if (!$(ev.target).closest(elm).length) {
        $(".overlay").css("z-index", "").fadeOut(100);
        $("body").css("overflow", "auto");
        elm.animate({
          width : "0"
        }, 100, function() {
          elm.removeClass("open");
        });
      }
    }
  });
  $(".menu .parent > a").click(function(types) {
    types.preventDefault();
    var $menu = $(this).parent('li');
    if ($menu.hasClass("open")) {
      $menu.children("ul").slideUp(100, function() {
        $menu.removeClass("open");
      });
    } else {
      $menu.children("ul").slideDown(100, function() {
        $menu.addClass("open");
      });
    }
  });

  $(".quantity a").click(function(types) {
    types.preventDefault();
    var tarspan = $(this);
    var input = tarspan.parent().children("input[name='quantity']");
    /** @type {number} */
    var index = parseInt(input.val());
    if (tarspan.hasClass("plus")) {
      input.val(index + 1);
    } else {
      if (tarspan.hasClass("minus")) {
        if (0 !== index) {
          input.val(index - 1);
        }
      }
    }
  });
  $(".deleteItem").click(function(types) {
    // types.preventDefault();
    var relatedTarget = $(this);
    var tooltip = relatedTarget.closest(".item");
    tooltip.fadeOut(500, function() {
      tooltip.remove();
    });
  });
  Waves.init();
  Waves.attach(".waveButton", ["waves-button"]);
  Waves.attach(".waveBlock", ["waves-block"]);
  $(".minImages").css("width", function() {
	  var length = $(".minImages .minImg").length;
	  var width = $(".imgBox .scroll-wrapper").width();
	  console.log(length);
	  if(length > 3)
		$(".minImages .minImg").css('width', '25%');
	  else
		$(".minImages .minImg").css('width', (100 / length)+"%");
	
    /** @type {number} */
    var display = $(".minImages .minImg").outerWidth() * $(".minImages .minImg").length - 10;
    return $(".minImages").css("display", "flex"), display;
  });
}) 
// $("<ul><li><a href='/'>\u0413\u043b\u0430\u0432\u043d\u0430\u044f</a></li> <li><a href='/detail_page.html'>\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430</a></li> <li><a href='/address.html'>\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u044b</a></li> <li><a href='/cart.html'>\u041a\u043e\u0440\u0437\u0438\u043d\u0430</a></li> <li><a href='/catalog.html'>\u041a\u0430\u0442\u0430\u043b\u043e\u0433</a></li> <li><a href='/info_delivery.html'>\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0435</a></li> <li><a href='/search_page.html'>\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u043e\u0438\u0441\u043a\u0430</a></li></ul>").appendTo("body");
var initialPoint;
var finalPoint;


window.addEventListener("orientationchange", ChangeOrientation, false);
